<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>June Choe</title>
    <link>https://yjunechoe.github.io</link>
    <atom:link href="https://yjunechoe.github.io/blog.xml" rel="self" type="application/rss+xml"/>
    <description>Personal Blog
</description>
    <image>
      <title>June Choe</title>
      <url>https://yjunechoe.github.io/static/img/icon.png</url>
      <link>https://yjunechoe.github.io</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Sun, 31 Dec 2023 00:00:00 +0000</lastBuildDate>
    <item>
      <title>2023 Year in Review</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2023-12-31-2023-year-in-review</link>
      <description>


&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;I’ve been seeing a &lt;a
href="https://www.pipinghotdata.com/posts/2023-12-18-2023-year-in-review/"&gt;couple&lt;/a&gt;
&lt;a
href="https://yabellini.netlify.app/blog/2023-12-23-year-review/"&gt;folks&lt;/a&gt;
on Mastodon sharing their “year in review” blog posts, and I thought
that was really cool, so I decided to write my own too! I’m mostly
documenting for myself but hopefully this also serves as an update of a
sort for my internet friends since I’ve been pretty silent online this
year.&lt;/p&gt;
&lt;h2 id="research"&gt;Research&lt;/h2&gt;
&lt;p&gt;Being the good grad student I am, I’m forefronting my academia
happenings first. In numbers, I published &lt;strong&gt;one paper&lt;/strong&gt;,
gave &lt;strong&gt;two talks&lt;/strong&gt;, and presented &lt;strong&gt;three
posters&lt;/strong&gt;. I’m not super proud of those numbers: I think they’re
a lot less than what people might expect from a 4th year PhD student.
But a lot of effort went into each&lt;a href="#fn1" class="footnote-ref"
id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and 2023 overall has been a great year for
refining and narrowing down on my dissertation topic. I did a ton of
readings and I hope it pays off for next year when I actually get
started on writing the thing.&lt;/p&gt;
&lt;p&gt;I already document my research happenings &lt;a
href="https://yjunechoe.github.io/research.html"&gt;elsewhere&lt;/a&gt; and I
know that my primarily audience isn’t linguists, so I won’t expand on
that more here.&lt;/p&gt;
&lt;h2 id="blogging"&gt;Blogging&lt;/h2&gt;
&lt;p&gt;2023 was the year when it became &lt;a
href="https://fosstodon.org/@yjunechoe/110437295974710184"&gt;painfully
obvious to me&lt;/a&gt; that I don’t have much in terms of a
&lt;em&gt;portfolio&lt;/em&gt; in the sense of the buzzword-y “data science
portfolio” that industry recruiters purportedly look for. This
ironically coincided with another realization I had, which is that I’m
increasingly becoming “the department tech/stats guy” where I take on
many small tasks and favors from faculty and other students here and
there; I truly do enjoy doing this work, but it’s completely invisible
to my CV/resume. I’m still navigating this weird position I’m in, but
I’ve found some nice tips&lt;a href="#fn2" class="footnote-ref"
id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and at least I still have another year
until I’m on the job market to fully figure this out.&lt;/p&gt;
&lt;p&gt;The reason why I put the above rant under the “Blogging” section is
because &lt;strong&gt;my blog is the closest thing I have a portfolio&lt;/strong&gt;
- there’s not much here, but it’s a public-facing space I own where I
get to show people what I know and how I think. So in 2023 I was more
conscious about what I blog about and how. The change was subtle - my
blog persona is still my usual self, but I’ve tried to &lt;strong&gt;diversify
the &lt;em&gt;style&lt;/em&gt; of my blogs&lt;/strong&gt;. Whereas I mostly wrote
long-form, tutorial-style blog posts in the past, I only wrote one such
post (&lt;a
href="https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations/"&gt;on
&lt;code&gt;dplyr::slice()&lt;/code&gt;&lt;/a&gt;) this year. My other blog posts were one
reflecting on &lt;a
href="https://yjunechoe.github.io/posts/2023-07-09-x-y-problem/"&gt;how to
better answer other people’s questions&lt;/a&gt;, and another where I &lt;a
href="https://yjunechoe.github.io/posts/2023-12-03-untidy-select/"&gt;nerd
out on the internals of {tidyselect}&lt;/a&gt; with little regard for its
practicality.&lt;a href="#fn3" class="footnote-ref"
id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All in all, I wrote &lt;strong&gt;three blog posts&lt;/strong&gt; this year (not
including this one). This is the usual rate of publishing blog posts for
me, but I hope to write more frequently next year (and write shorter
posts overall, and in less formal tone).&lt;/p&gt;
&lt;h2 id="r-stuff"&gt;R stuff&lt;/h2&gt;
&lt;p&gt;I didn’t think I’d have much to say about the R stuff I did this year
until I sat down to write this blog. Even though this year was the
busiest I’ve ever been with research, it turns out that I still ende up
doing quite a bit of R stuff in my free time. I’ll cover this
chronologically.&lt;/p&gt;
&lt;p&gt;At the beginning of the year, I was really lucky to receive the &lt;a
href="https://community.amstat.org/jointscsg-section/awards/student-paper-competition"&gt;student
paper award&lt;/a&gt; from the &lt;a
href="https://community.amstat.org/jointscsg-section/home"&gt;Statistical
Computing and Graphics section of the ASA&lt;/a&gt;, writing about &lt;a
href="https://yjunechoe.github.io/ggtrace/"&gt;{ggtrace}&lt;/a&gt;.&lt;a href="#fn4"
class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; In the &lt;a
href="https://yjunechoe.github.io/static/papers/Choe_2022_SublayerGG.pdf"&gt;paper&lt;/a&gt;,
I focused on &lt;code&gt;{ggtrace}&lt;/code&gt; as a pedagogical tool for aspiring
&lt;code&gt;{ggplot2}&lt;/code&gt; extension developers. In the process, I
rediscovered the power of &lt;strong&gt;reframing ggplot internals as data
wrangling&lt;/strong&gt; and went back to &lt;code&gt;{ggtrace}&lt;/code&gt; to add a
couple &lt;a
href="https://yjunechoe.github.io/ggtrace/news/index.html#ggtrace-development-version-3"&gt;convenience
functions&lt;/a&gt; for interactive use-cases. After over two years since its
inception, &lt;code&gt;{ggtrace}&lt;/code&gt; now feels pretty complete in terms of
its core features.&lt;/p&gt;
&lt;p&gt;In Spring, I began writing &lt;a
href="https://yjunechoe.github.io/jlmerclusterperm/"&gt;{jlmerclusterperm}&lt;/a&gt;,
a statistical package implementing the cluster-based permutation test
for time series data, using mixed-effects models. This was a new
challenge for me for two reasons. First, I wrote much of the package &lt;a
href="https://github.com/yjunechoe/jlmerclusterperm/tree/main/inst/julia/JlmerClusterPerm/src"&gt;in
Julia&lt;/a&gt; - this was my first time writing Julia code for “production”
and within an R package.&lt;a href="#fn5" class="footnote-ref"
id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; Second, I wrote this package for a seminar
on eye movements that I was taking that Spring in the psychology
department. I wrote &lt;code&gt;{jlmerclusterperm}&lt;/code&gt; in an intense burst
- most of it was complete by the end of May and I turned in the package
as my final.&lt;a href="#fn6" class="footnote-ref"
id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; I also gave a school-internal &lt;a
href="https://mindcore.sas.upenn.edu/calendar_event/ilst-seminar-students/"&gt;talk&lt;/a&gt;
on it in April; my first time talking about R in front of an entirely
academic audience.&lt;/p&gt;
&lt;p&gt;In Summer, I continued polishing &lt;code&gt;{jlmerclusterperm}&lt;/code&gt; with
another ambitious goal of getting it to CRAN, at the suggestion of a
couple researchers who said they’d like to use it for their own
research. The already-hard task of getting through &lt;strong&gt;my first CRAN
submission&lt;/strong&gt; was compounded by the fact that the package
contained Julia code - it took &lt;em&gt;nine resubmissions in the span of two
months&lt;/em&gt; to finally get &lt;code&gt;{jlmerclusterperm}&lt;/code&gt; stably on
CRAN.&lt;a href="#fn7" class="footnote-ref"
id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At the beginning of Fall, I attended the &lt;a
href="https://repsychling.github.io/SMLP2023/"&gt;Advanced Frequentist
stream&lt;/a&gt; of the &lt;a
href="https://vasishth.github.io/smlp2023/"&gt;SMLP2023&lt;/a&gt; workshop,
taught by Phillip Alday, Reinhold Kliegl and Douglas Bates. The topic
was &lt;strong&gt;mixed-effects regression models in Julia&lt;/strong&gt;, one that
I became very excited about especially after working on
&lt;code&gt;{jlmerclusterperm}&lt;/code&gt;. It was an absolute blast and I wish
that everyone in linguistics/psychology research appreciated good
stats/data analysis as much as the folks I met there. The workshop was
far away in Germany (my first time ever in Europe!) and I’m really
thankful to &lt;a href="https://mindcore.sas.upenn.edu/"&gt;MindCORE&lt;/a&gt; for
giving me a grant to help with travel expenses.&lt;/p&gt;
&lt;p&gt;For most of Fall, I didn’t do much R stuff, especially with the start
of the Fall semester and a big conference looming on the horizon. But
the little time I did spend on it, I worked on maintenance and upkeep
for &lt;code&gt;{openalexR}&lt;/code&gt;, one of my few collaborative projects. It’s
also one of the few packages for which I’m an author of that I actually
frequently use myself. I used &lt;code&gt;{openalexR}&lt;/code&gt; a lot during the
Fall semester for conducting literature reviews in preparation for my
dissertation proposal, so I had a few opportunities to catch bugs and
work on other improvements. I also spent a lot of my time in the Fall
TA-ing for an &lt;a
href="https://kathrynschuler.com/datasci/"&gt;undergraduate data science
class&lt;/a&gt; that we recently started offering in our department. This was
actually my third year in a row TA-ing it, so it went pretty smoothly. I
even learned some new &lt;a
href="https://fosstodon.org/@yjunechoe/111026163637396686"&gt;quirky R
behaviors&lt;/a&gt; from my students along the way.&lt;/p&gt;
&lt;p&gt;In October, I virtually attended the &lt;a
href="https://rinpharma.com/"&gt;R/Pharma conference&lt;/a&gt; and joined a &lt;a
href="https://github.com/rich-iannone/pointblank-workshop"&gt;workshop&lt;/a&gt;
on data validation using the &lt;code&gt;{pointblank}&lt;/code&gt; package by &lt;a
href="https://github.com/rich-iannone"&gt;Rich Iannone&lt;/a&gt;. I had used
&lt;code&gt;{pointblank}&lt;/code&gt; a little before, but I didn’t explore its
features much because I thought it had some odd behaviors that I
couldn’t comprehend. The workshop cleared up some of the confusion for
me, and Rich made it clear in the workshop that he welcomed
contributions to improve the package. So I &lt;a
href="https://github.com/rstudio/pointblank/pull/493"&gt;made a PR&lt;/a&gt;
addressing the biggest pain point I personally had with using
&lt;code&gt;{pointblank}&lt;/code&gt;. This turned out to be a pretty big
undertaking which took over a month to complete. In the process, I
become a co-author of &lt;code&gt;{pointblank}&lt;/code&gt;, and I merged a series
of PRs that improved the consistency of function designs, among other
things.&lt;/p&gt;
&lt;p&gt;The last R thing I did this year was actually secretly Julia - in
December I gave a school-internal &lt;a
href="https://github.com/yjunechoe/MindCORE-julia-mixedmodels"&gt;workshop&lt;/a&gt;
on fitting mixed effects in Julia, geared towards an academic audience
with experience in R. I advocated for a middle-ground approach where you
can keep doing everything in R and RStudio, except move the modelling
workflow into Julia. I live-coded some Julia code and ran it from
RStudio&lt;a href="#fn8" class="footnote-ref" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;
which I think wasn’t too difficult to grasp. I have a half-baked package
of addins to make R-Julia interoperability smoother in RStudio; this
might become my next full project.&lt;/p&gt;
&lt;p&gt;That brings me to the present moment, where I’m currently taking a
break from FOSS to focus on my research, as my dissertation proposal
defense is coming up soon. I will continue to maintain
&lt;code&gt;{jlmerclusterperm}&lt;/code&gt; during this time (since there’s an
active user-base of researchers who find it useful) but my other
projects will become low priority. I also don’t think I’ll be starting a
new project any time soon, but in the near future I hope I come up with
something cool that lets me test-drive &lt;code&gt;{S7}&lt;/code&gt;!&lt;/p&gt;
&lt;h2 id="personal"&gt;Personal&lt;/h2&gt;
&lt;p&gt;This year, I tried to be less of a workaholic. I think I did an okay
job at it, and it came in the form of diversifying my hobbies (R used to
be my only hobby since starting grad school). I got back into ice
skating&lt;a href="#fn9" class="footnote-ref" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;
and, briefly, swimming,&lt;a href="#fn10" class="footnote-ref"
id="fnref10"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt; and I’m fortunate that both are available
literally two blocks away from my department. My girlfriend and I got
really into escape rooms this year, mostly playing online ones due to
budget constraints.&lt;a href="#fn11" class="footnote-ref"
id="fnref11"&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt; I also got back into playing Steam games
and racked up over 300 hours on &lt;a
href="https://store.steampowered.com/app/646570/Slay_the_Spire/"&gt;Slay
the Spire&lt;/a&gt;, mostly from the ~2 weeks recovering from covid in
September.&lt;a href="#fn12" class="footnote-ref"
id="fnref12"&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And of course, I have many people to thank for making this a
wonderful year.&lt;a href="#fn13" class="footnote-ref"
id="fnref13"&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt; Happy new year to all!&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes footnotes-end-of-document"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I was the first author for all research that I
presented, as is often the case in linguistics.&lt;a href="#fnref1"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Like &lt;a
href="https://www.phillipalday.com/blog/2013/02/19/Backups-Your-Relationship-to-Your-Data-and-Your-IT-Guy/"&gt;this
blog post&lt;/a&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;A style heavily inspired by some of my favorite R
bloggers like &lt;a href="https://www.rostrum.blog/"&gt;Matt Dray&lt;/a&gt; and &lt;a
href="https://jcarroll.com.au/"&gt;Jonathan Carroll&lt;/a&gt;&lt;a href="#fnref3"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Coincidentally, my girlfriend also won a student award
this year from another ASA - the Acoustical Society of America.&lt;a
href="#fnref4" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;I can’t recommend &lt;code&gt;{JuliaConnectoR}&lt;/code&gt; enough
for this.&lt;a href="#fnref5" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;I’m actually quite proud of myself for pulling this off
- writing an R package for the final was unprecedented for the class.&lt;a
href="#fnref6" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;In the process, I received the elusive CRAN Note for
exceeding 6 updates in under a month (CRAN recommends one update every
1-2 months).&lt;a href="#fnref7" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;Using some tricks described in the workshop materials.&lt;a
href="#fnref8" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;I used to play ice hockey competitively as a kid.&lt;a
href="#fnref9" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn10"&gt;&lt;p&gt;Turns out that swimming does not play well with my
preexisting ear conditions.&lt;a href="#fnref10"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn11"&gt;&lt;p&gt;Most recently we played &lt;a
href="https://wolfescapegames.com/en-us/products/hallows-hill-the-virtual-escape-room-experience"&gt;Hallows
Hill&lt;/a&gt; which I think is the best one we’ve played so far&lt;a
href="#fnref11" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn12"&gt;&lt;p&gt;For the fellow nerds, I reached A20 on Ironclad,
Defect, and Watcher. I’m working my way up for Silent.&lt;a href="#fnref12"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn13"&gt;&lt;p&gt;I’m feeling shy so this goes in the footnotes. In
roughly chronological order, I’m firstly indebted to Sam Tyner-Monroe
who encouraged me write up &lt;code&gt;{ggtrace}&lt;/code&gt; for the ASA paper
award after my rstudio::conf talk on it last year. I’m grateful to Gina
Reynolds and Teun van den Brand (and others in the &lt;a
href="https://github.com/teunbrand/ggplot-extension-club"&gt;ggplot
extension club&lt;/a&gt;) for engaging in many insightful data viz/ggplot
internals discussions with me. I’m also grateful to my FOSS
collaborators, especially Trang Le, from whom I’ve learned a lot about
code review and package design principles while working on
&lt;code&gt;{openalexR}&lt;/code&gt; together. Last but not least, I owe a lot to
Daniel Sjoberg and Shannon Pileggi for a recent development that I’m not
ready to publicly share yet 🤫.&lt;a href="#fnref13"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>5a5ff09361103ad583ba8d3e8db47b20</distill:md5>
      <category>reflections</category>
      <guid>https://yjunechoe.github.io/posts/2023-12-31-2023-year-in-review</guid>
      <pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The many ways to (un)tidy-select</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2023-12-03-untidy-select</link>
      <description>


&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;Recently, I’ve been having &lt;a
href="https://github.com/rstudio/pointblank/pull/493"&gt;frequent&lt;/a&gt; &lt;a
href="https://github.com/rstudio/pointblank/pull/499"&gt;run-ins&lt;/a&gt; with
&lt;code&gt;{tidyselect}&lt;/code&gt; internals, discovering some weird and
interesting behaviors along the way. This blog post is my attempt at
documenting a couple of these. And as is the case with my usual style of
writing, I’m gonna talk about some of the weirder stuff first and then
touch on some of the “practical” side to this.&lt;/p&gt;
&lt;h2 id="some-observations"&gt;Some observations&lt;/h2&gt;
&lt;p&gt;Let’s start with some facts about how &lt;code&gt;{tidyselect}&lt;/code&gt; is
supposed to work. I’ll use this toy data for the demo:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(dplyr, warn.conflicts = FALSE)
library(tidyselect)
df &amp;lt;- tibble(x = 1:2, y = letters[1:2], z = LETTERS[1:2])
df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 3
        x y     z    
    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
  1     1 a     A    
  2     2 b     B&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="tidy-select"&gt;tidy-select!&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;{tidyselect}&lt;/code&gt; is the package that powers
&lt;code&gt;dplyr::select()&lt;/code&gt;. If you’ve used &lt;code&gt;{dplyr}&lt;/code&gt;, you
already know the behavior of &lt;code&gt;select()&lt;/code&gt; pretty well. We can
specify a column as string, symbol, or by its position:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;% 
  select(&amp;quot;x&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
        x
    &amp;lt;int&amp;gt;
  1     1
  2     2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;% 
  select(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
        x
    &amp;lt;int&amp;gt;
  1     1
  2     2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;% 
  select(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
        x
    &amp;lt;int&amp;gt;
  1     1
  2     2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s not obvious from the outside, but the way this works is that
these user-supplied expressions (like &lt;code&gt;"x"&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;,
and &lt;code&gt;1&lt;/code&gt;) all get &lt;strong&gt;resolved to integer&lt;/strong&gt; before
the selection actually happens.&lt;/p&gt;
&lt;p&gt;So to be more specific, the three calls to &lt;code&gt;select()&lt;/code&gt; were
the same because these three calls to
&lt;code&gt;tidyselect::eval_select()&lt;/code&gt; are the same:&lt;a href="#fn1"
class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;eval_select(quote(&amp;quot;x&amp;quot;), df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  x 
  1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;eval_select(quote(x), df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  x 
  1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;eval_select(quote(1), df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  x 
  1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also see &lt;code&gt;eval_select()&lt;/code&gt; in action in the
&lt;code&gt;&amp;lt;data.frame&amp;gt;&lt;/code&gt; method for &lt;code&gt;select()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;dplyr:::select.data.frame&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (.data, ...) 
  {
      error_call &amp;lt;- dplyr_error_call()
      loc &amp;lt;- tidyselect::eval_select(expr(c(...)), data = .data, 
          error_call = error_call)
      loc &amp;lt;- ensure_group_vars(loc, .data, notify = TRUE)
      out &amp;lt;- dplyr_col_select(.data, loc)
      out &amp;lt;- set_names(out, names(loc))
      out
  }
  &amp;lt;bytecode: 0x0000018a9b615f60&amp;gt;
  &amp;lt;environment: namespace:dplyr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="tidy-select-1"&gt;tidy?-select&lt;/h3&gt;
&lt;p&gt;Because the column &lt;em&gt;subsetting&lt;/em&gt; part is ultimately done using
integers, we can theoretically pass &lt;code&gt;select()&lt;/code&gt; &lt;em&gt;any&lt;/em&gt;
expression, as long as it resolves to an integer vector.&lt;/p&gt;
&lt;p&gt;For example, we can use &lt;code&gt;1 + 1&lt;/code&gt; to select the second
column:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;% 
  select(1 + 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And vector recycling is still a thing here too - we can use
&lt;code&gt;c(1, 2) + 1&lt;/code&gt; to select the second and third columns:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;% 
  select(c(1, 2) + 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 2
    y     z    
    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
  1 a     A    
  2 b     B&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ordinary function calls work as well - we can select a random column
using &lt;code&gt;sample()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;% 
  select(sample(ncol(df), 1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can even use the &lt;code&gt;.env&lt;/code&gt; pronoun to scope an integer
variable from the global environment:&lt;a href="#fn2" class="footnote-ref"
id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;offset &amp;lt;- 1
df %&amp;gt;% 
  select(1 + .env$offset)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that’s kinda interesting.&lt;a href="#fn3" class="footnote-ref"
id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; But what if we try to mix the different
approaches to tidyselect-ing? Can we do math on columns that we’ve
selected using strings and symbols?&lt;/p&gt;
&lt;h3 id="untidy-select"&gt;untidy-select?&lt;/h3&gt;
&lt;p&gt;Uh not quite. &lt;code&gt;select()&lt;/code&gt; doesn’t like doing math on
strings and symbols.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;% 
  select(x + 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Error in `select()`:
  ! Problem while evaluating `x + 1`.
  Caused by error:
  ! object &amp;#39;x&amp;#39; not found&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;% 
  select(&amp;quot;x&amp;quot; + 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Error in `select()`:
  ! Problem while evaluating `&amp;quot;x&amp;quot; + 1`.
  Caused by error in `&amp;quot;x&amp;quot; + 1`:
  ! non-numeric argument to binary operator&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact, it doesn’t even like doing certain kinds of math like
multiplication (&lt;code&gt;*&lt;/code&gt;), even with numeric constants:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;% 
  select(1 * 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Error in `select()`:
  ! Can&amp;#39;t use arithmetic operator `*` in selection context.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This actually makes sense from a design POV. Adding numbers to
columns probably happens more often as a mistake than something
intentional. These safeguards exist to prevent users from running into
cryptic errors.&lt;/p&gt;
&lt;p&gt;Unless…&lt;/p&gt;
&lt;h3 id="untidy-select-1"&gt;untidy-select!&lt;/h3&gt;
&lt;p&gt;It turns out that &lt;code&gt;{tidyselect}&lt;/code&gt;
&lt;em&gt;&lt;strong&gt;helpers&lt;/strong&gt;&lt;/em&gt; have an interesting behavior of
&lt;em&gt;immediately&lt;/em&gt; resolving the column selection to integer. So we
can get addition (&lt;code&gt;+&lt;/code&gt;) working if we wrap our columns in
redundant column selection helpers like &lt;code&gt;all_of()&lt;/code&gt; and
&lt;code&gt;matches()&lt;/code&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;% 
  select(all_of(&amp;quot;x&amp;quot;) + 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;% 
  select(matches(&amp;quot;^x$&amp;quot;) + 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For multiplication, we have to additionally circumvent the &lt;a
href="https://github.com/r-lib/tidyselect/blob/7cc3ea6213838dbb3f9c19e9a8b97cd03f5063a9/R/eval-walk.R#L167"&gt;censoring&lt;/a&gt;
of the &lt;code&gt;*&lt;/code&gt; symbol. Here, we can simply use a different name
for the same operation:&lt;a href="#fn4" class="footnote-ref"
id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;`%times%` &amp;lt;- `*`
df %&amp;gt;% 
  select(matches(&amp;quot;^x$&amp;quot;) %times% 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But geez, it’s so tiring to type &lt;code&gt;all_of()&lt;/code&gt; and
&lt;code&gt;matches()&lt;/code&gt; all the time. There must be a better way to break
the rule!&lt;/p&gt;
&lt;h2 id="tidying-untidy-select"&gt;Tidying untidy-select&lt;/h2&gt;
&lt;p&gt;Let’s make a tidy design for the untidy pattern of selecting columns
by doing math on column locations. The idea is to make our own little
scope inside &lt;code&gt;select()&lt;/code&gt; where all the existing safeguards are
suspended. Like a &lt;a
href="https://en.wikipedia.org/wiki/Domain-specific_language"&gt;DSL&lt;/a&gt;
within a DSL, if you will.&lt;/p&gt;
&lt;p&gt;Let’s call this function &lt;code&gt;math()&lt;/code&gt;. It should let us
express stuff like “give me the column to the right of column
&lt;code&gt;x&lt;/code&gt;” via this intuitive(?) syntax:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;% 
  select(math(x + 1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is my take on &lt;code&gt;math()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;math &amp;lt;- function(expr) {
  math_expr &amp;lt;- rlang::enquo(expr)
  columns &amp;lt;- tidyselect::peek_vars()
  col_locs &amp;lt;- as.data.frame.list(seq_along(columns), col.names = columns)
  mask &amp;lt;- rlang::as_data_mask(col_locs)
  out &amp;lt;- rlang::eval_tidy(math_expr, mask)
  out
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s a lot of weird functions involved here, but it’s easier to
digest by focusing on its parts. Here’s what each local variable in the
function looks like for our &lt;code&gt;math(x + 1)&lt;/code&gt; example above:&lt;/p&gt;
&lt;p&gt;Let’s walk through the pieces:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;math_expr&lt;/code&gt;: the captured user expression, with the
environment attached&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;columns&lt;/code&gt;: the column names of the current dataframe,
in order&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;col_locs&lt;/code&gt;: a dataframe of column names and location,
created from &lt;code&gt;columns&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mask&lt;/code&gt;: a &lt;a
href="https://rlang.r-lib.org/reference/topic-data-mask.html"&gt;data
mask&lt;/a&gt; created from &lt;code&gt;col_locs&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;out&lt;/code&gt;: location of column(s) to select&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Essentially, &lt;code&gt;math()&lt;/code&gt; first captures the expression to
evaluate it in its own special environment, circumventing
&lt;code&gt;select()&lt;/code&gt;’s safeguards. Then, it grabs the column names of
the data frame with &lt;code&gt;tidyselect::peek_vars()&lt;/code&gt; to define
&lt;code&gt;col_locs&lt;/code&gt; and then &lt;code&gt;mask&lt;/code&gt;. The data mask
&lt;code&gt;mask&lt;/code&gt; is then used inside &lt;code&gt;rlang::eval_tidy()&lt;/code&gt; to
resolve symbols like &lt;code&gt;x&lt;/code&gt; to integer &lt;code&gt;1&lt;/code&gt; when
evaluating the captured expression &lt;code&gt;x + 1&lt;/code&gt;. The expression
&lt;code&gt;math(x + 1)&lt;/code&gt; thus evaluates to &lt;code&gt;1 + 1&lt;/code&gt;. In turn,
&lt;code&gt;select(math(x + 1))&lt;/code&gt; is evaluated to &lt;code&gt;select(2)&lt;/code&gt;,
returning us the second column of the dataframe.&lt;/p&gt;
&lt;h2 id="writing-untidy-select-helpers"&gt;Writing untidy-select
helpers&lt;/h2&gt;
&lt;p&gt;A small yet powerful detail in the implementation of
&lt;code&gt;math()&lt;/code&gt; is the fact that it captures the expression as a &lt;a
href="https://rlang.r-lib.org/reference/topic-quosure.html"&gt;quosure&lt;/a&gt;.
This allows &lt;code&gt;math()&lt;/code&gt; to appropriately scope dynamically
created variables, and not just bare symbols provided directly by the
user.&lt;/p&gt;
&lt;p&gt;This makes more sense with some examples. Here, I define helper
functions that call &lt;code&gt;math()&lt;/code&gt; under the hood with their own
templatic math expressions (and I have them &lt;code&gt;print()&lt;/code&gt; the
expression as passed to &lt;code&gt;math()&lt;/code&gt; for clarity). The fact that
&lt;code&gt;math()&lt;/code&gt; captures its argument as a quosure is what allows
local variables like &lt;code&gt;n&lt;/code&gt; to be correctly scoped in these
examples.&lt;/p&gt;
&lt;h3 id="times"&gt;1) &lt;code&gt;times()&lt;/code&gt;&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;times &amp;lt;- function(col, n) {
  col &amp;lt;- rlang::ensym(col)
  print(rlang::expr(math(!!col * n))) # for debugging
  math(!!col * n)
}
df %&amp;gt;%
  select(times(x, 2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  math(x * n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;num2 &amp;lt;- 2
df %&amp;gt;%
  select(times(x, num2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  math(x * n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="offset"&gt;2) &lt;code&gt;offset()&lt;/code&gt;&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;offset &amp;lt;- function(col, n) {
  col &amp;lt;- rlang::ensym(col)
  print(rlang::expr(math(!!col + n))) # for debugging
  math(!!col + n)
}
df %&amp;gt;%
  select(offset(x, 1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  math(x + n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;num1 &amp;lt;- 1
df %&amp;gt;%
  select(offset(x, num1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  math(x + n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="neighbors"&gt;3) &lt;code&gt;neighbors()&lt;/code&gt;&lt;/h3&gt;
&lt;pre class="r"&gt;&lt;code&gt;neighbors &amp;lt;- function(col, n) {
  col &amp;lt;- rlang::ensym(col)
  range &amp;lt;- c(-(n:1), 1:n)
  print(rlang::expr(math(!!col + !!range))) # for debugging
  math(!!col + !!range)
}
df %&amp;gt;%
  select(neighbors(y, 1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  math(y + c(-1L, 1L))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 2
        x z    
    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
  1     1 A    
  2     2 B&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;%
  select(neighbors(y, num1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  math(y + c(-1L, 1L))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 2
        x z    
    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
  1     1 A    
  2     2 B&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="diy"&gt;DIY!&lt;/h3&gt;
&lt;p&gt;And of course, we can do arbitrary injections ourselves as well with
&lt;code&gt;!!&lt;/code&gt; or &lt;code&gt;.env$&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;%
  select(math(x * !!num2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;df %&amp;gt;%
  select(math(x * .env$num2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 2 × 1
    y    
    &amp;lt;chr&amp;gt;
  1 a    
  2 b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That was fun but probably not super practical. Let’s set
&lt;code&gt;math()&lt;/code&gt; aside to try our hands on something more useful.&lt;/p&gt;
&lt;h2 id="lets-get-practical"&gt;Let’s get practical&lt;/h2&gt;
&lt;h3 id="sorting-columns"&gt;1) Sorting columns&lt;/h3&gt;
&lt;p&gt;Probably one of the hardest things to do idiomatically in the
tidyverse is sorting (a subset of) columns by their name. For example,
consider this dataframe which is a mix of columns that follow some fixed
pattern (&lt;code&gt;"x|y_\\d"&lt;/code&gt;) and those outside that pattern
(&lt;code&gt;"year"&lt;/code&gt;, &lt;code&gt;"day"&lt;/code&gt;, etc.).&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;data_cols &amp;lt;- expand.grid(first = c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;), second = 1:3) %&amp;gt;%
  mutate(cols = paste0(first, &amp;quot;_&amp;quot;, second)) %&amp;gt;%
  pull(cols)
df2 &amp;lt;- as.data.frame.list(seq_along(data_cols), col.names = data_cols)
df2 &amp;lt;- cbind(df2, storms[1,1:5])
df2 &amp;lt;- df2[, sample(ncol(df2))]
df2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    y_3 x_3 month day hour y_2 y_1 x_2 year name x_1
  1   6   5     6  27    0   4   2   3 1975  Amy   1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s trivial to select columns by pattern - we can use the
&lt;code&gt;matches()&lt;/code&gt; helper:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df2 %&amp;gt;%
  select(matches(&amp;quot;(x|y)_(\\d)&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    y_3 x_3 y_2 y_1 x_2 x_1
  1   6   5   4   2   3   1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what if I also wanted to further sort these columns, &lt;em&gt;after I
select them&lt;/em&gt;? There’s no easy way to do this “on the fly” inside of
select, especially if we want the flexibility to sort the columns by the
letter vs. the number.&lt;/p&gt;
&lt;p&gt;But here’s one way of getting at that, exploiting two facts:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;code&gt;matches()&lt;/code&gt;, like other tidyselect helpers, immediately
resolves the selection to integer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;peek_vars()&lt;/code&gt; returns the column names in order, which
lets us recover the column names from location&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that’s pretty much all there is to the tidyselect magic that goes
into my solution below. I define &lt;code&gt;locs&lt;/code&gt; (integer vector of
column locations) and &lt;code&gt;cols&lt;/code&gt; (character vector of column
names at those locations), and the rest is just regex and sorting:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ordered_matches &amp;lt;- function(matches, order) {
  # tidyselect magic
  locs &amp;lt;- tidyselect::matches(matches)
  cols &amp;lt;- tidyselect::peek_vars()[locs]
  # Ordinary evaluation
  groups &amp;lt;- simplify2array(regmatches(cols, regexec(matches, cols)))[-1,]
  reordered &amp;lt;- do.call(&amp;quot;order&amp;quot;, asplit(groups[order, ], 1))
  locs[reordered]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;ordered_matches()&lt;/code&gt;, we can not only select columns
but also sort them using regex capture groups.&lt;/p&gt;
&lt;p&gt;This sorts the columns by letter first then number:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df2 %&amp;gt;%
  select(ordered_matches(&amp;quot;(x|y)_(\\d)&amp;quot;, c(1, 2)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    x_1 x_2 x_3 y_1 y_2 y_3
  1   1   3   5   2   4   6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This sorts the columns by number first then letter:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df2 %&amp;gt;%
  select(ordered_matches(&amp;quot;(x|y)_(\\d)&amp;quot;, c(2, 1)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    x_1 y_1 x_2 y_2 x_3 y_3
  1   1   2   3   4   5   6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if we wanted the other columns too, we can use
&lt;code&gt;everything()&lt;/code&gt; to grab the “rest”:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df2 %&amp;gt;%
  select(ordered_matches(&amp;quot;(x|y)_(\\d)&amp;quot;, c(2, 1)), everything())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    x_1 y_1 x_2 y_2 x_3 y_3 month day hour year name
  1   1   2   3   4   5   6     6  27    0 1975  Amy&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="error-handling"&gt;2) Error handling&lt;/h3&gt;
&lt;p&gt;One of the really nice parts about the &lt;code&gt;{tidyselect}&lt;/code&gt;
design is the fact that error messages are very informative.&lt;/p&gt;
&lt;p&gt;For example, if you select a non-existing column, it errors while
pointing out that mistake:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;df3 &amp;lt;- data.frame(x = 1)
nonexistent_selection &amp;lt;- quote(c(x, y))
eval_select(nonexistent_selection, df3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Error in `write_feed_xml_html_content()`:
  ! Can&amp;#39;t subset columns that don&amp;#39;t exist.
  ✖ Column `y` doesn&amp;#39;t exist.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use a tidyselect helper that returns nothing, it won’t
complain by default:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;zero_selection &amp;lt;- quote(starts_with(&amp;quot;z&amp;quot;))
eval_select(zero_selection, df3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  named integer(0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you can make that error with
&lt;code&gt;allow_empty = FALSE&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;eval_select(zero_selection, df3, allow_empty = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Error in `write_feed_xml_html_content()`:
  ! Must select at least one item.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;General evaluation errors are caught and &lt;a
href="https://rlang.r-lib.org/reference/topic-error-chaining.html"&gt;chained&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;evaluation_error &amp;lt;- quote(stop(&amp;quot;I&amp;#39;m a bad expression!&amp;quot;))
eval_select(evaluation_error, df3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Error in `write_feed_xml_html_content()`:
  ! Problem while evaluating `stop(&amp;quot;I&amp;#39;m a bad expression!&amp;quot;)`.
  Caused by error:
  ! I&amp;#39;m a bad expression!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These error signalling patterns are clearly very useful for users,&lt;a
href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; but
there’s a little gem in there for developers too. It turns out that the
&lt;strong&gt;error condition object&lt;/strong&gt; contains these information too,
which lets you detect different error types programmatically to forward
errors to your own error handling logic.&lt;/p&gt;
&lt;p&gt;For example, the attempted non-existent column is stored in
&lt;code&gt;$i&lt;/code&gt;:&lt;a href="#fn6" class="footnote-ref"
id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cnd_nonexistent &amp;lt;- rlang::catch_cnd(
  eval_select(nonexistent_selection, df3)
)
cnd_nonexistent$i&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1] &amp;quot;y&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Zero column selections give you &lt;code&gt;NULL&lt;/code&gt; in &lt;code&gt;$i&lt;/code&gt;
when you set it to error:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cnd_zero_selection &amp;lt;- rlang::catch_cnd(
  eval_select(zero_selection, df3, allow_empty = FALSE)
)
cnd_zero_selection$i&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;General evaluation errors are distinguished by having a
&lt;code&gt;$parent&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;cnd_evaluation_error &amp;lt;- rlang::catch_cnd(
  eval_select(evaluation_error, df3)
)
cnd_evaluation_error$parent&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;simpleError in eval_tidy(as_quosure(expr, env), context_mask): I&amp;#39;m a bad expression!&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this is more useful as a developer, if you’re building
something that integrates &lt;code&gt;{tidyselect}&lt;/code&gt;.&lt;a href="#fn7"
class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; But I personally find
this interesting to know about anyways!&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here I end with the (usual) disclaimer to not actually just copy
paste these for production - they’re written with the very low standard
of scratching my itch, so they do not come with any warranty!&lt;/p&gt;
&lt;p&gt;But I hope that this was a fun exercise in thinking through one of
the most mysterious magics in &lt;code&gt;{dplyr}&lt;/code&gt;. I’m sure to
reference this many times in the future myself.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes footnotes-end-of-document"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The examples &lt;code&gt;quote("x")&lt;/code&gt; and
&lt;code&gt;quote(1)&lt;/code&gt; are redundant because &lt;code&gt;"x"&lt;/code&gt; and
&lt;code&gt;1&lt;/code&gt; are constants. I keep &lt;code&gt;quote()&lt;/code&gt; in there just
to make the comparison clearer&lt;a href="#fnref1"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Not to be confused with &lt;code&gt;all_of()&lt;/code&gt;. The
idiomatic pattern for scoping an external &lt;em&gt;character&lt;/em&gt; vector is
to do &lt;code&gt;all_of(x)&lt;/code&gt; not &lt;code&gt;.env$x&lt;/code&gt;. It’s only when
you’re scoping a non-character vector that you’d use
&lt;code&gt;.env$&lt;/code&gt;.&lt;a href="#fnref2"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;It’s also strangely reminiscent of my &lt;a
href="https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations/"&gt;previous
blog post&lt;/a&gt; on &lt;code&gt;dplyr::slice()&lt;/code&gt;&lt;a href="#fnref3"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Thanks to &lt;a
href="https://fosstodon.org/@jonocarroll/111343255529231116"&gt;Jonathan
Carroll&lt;/a&gt; for this suggestion!&lt;a href="#fnref4"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;For those who actually read error messages, at least
(&lt;em&gt;points to self&lt;/em&gt;) …&lt;a href="#fnref5"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Though &lt;code&gt;{tidyselect}&lt;/code&gt; errors early, so it’ll
only record the first attempted column causing the error. You could use
a &lt;code&gt;while()&lt;/code&gt; loop (catch and remove bad columns from the data
until there’s no more error) if you really wanted to get the full set of
offending columns.&lt;a href="#fnref6" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;If you want some examples of post-processing tidyselect
errors, there’s some stuff I did for &lt;a
href="https://github.com/rstudio/pointblank/blob/7c4bdd0eb753db17b5213d03fd74f044df12be48/R/utils.R#L241-L318"&gt;pointblank&lt;/a&gt;
that may be helpful as a reference.&lt;a href="#fnref7"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>32275e0b0a132d327f6605e22aa8b745</distill:md5>
      <category>data wrangling</category>
      <category>dplyr</category>
      <category>tidyselect</category>
      <guid>https://yjunechoe.github.io/posts/2023-12-03-untidy-select</guid>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2023-12-03-untidy-select/preview.png" medium="image" type="image/png" width="957" height="664"/>
    </item>
    <item>
      <title>Fumbling my way through an XY problem</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2023-07-09-x-y-problem</link>
      <description>Some lessons learned from a (personal) case study</description>
      <category>reflections</category>
      <guid>https://yjunechoe.github.io/posts/2023-07-09-x-y-problem</guid>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2023-07-09-x-y-problem/preview.png" medium="image" type="image/png" width="238" height="205"/>
    </item>
    <item>
      <title>Row relational operations with slice()</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations</link>
      <description>A love letter to dplyr::slice() and a gallery of usecases</description>
      <category>data wrangling</category>
      <category>dplyr</category>
      <guid>https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations</guid>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations/preview.png" medium="image" type="image/png" width="1800" height="1080"/>
    </item>
    <item>
      <title>First impressions of DataFrames.jl and accessories</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2022-11-13-dataframes-jl-and-accessories</link>
      <description>Perspectives from a {dplyr} and {data.table} useR</description>
      <category>julia</category>
      <category>data wrangling</category>
      <category>DataFrames.jl</category>
      <category>dplyr</category>
      <category>data.table</category>
      <guid>https://yjunechoe.github.io/posts/2022-11-13-dataframes-jl-and-accessories</guid>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2022-11-13-dataframes-jl-and-accessories/preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Reflections on useR! 2022</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2022-07-30-user2022</link>
      <description>Notes from attending and speaking at my first R conference</description>
      <category>conference</category>
      <category>ggtrace</category>
      <guid>https://yjunechoe.github.io/posts/2022-07-30-user2022</guid>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2022-07-30-user2022/preview.png" medium="image" type="image/png" width="520" height="260"/>
    </item>
    <item>
      <title>Demystifying delayed aesthetic evaluation: Part 2</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2022-07-06-ggplot2-delayed-aes-2</link>
      <description>Exposing the `Stat` ggproto in functional programming terms</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2022-07-06-ggplot2-delayed-aes-2</guid>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2022-07-06-ggplot2-delayed-aes-2/preview.png" medium="image" type="image/png" width="3469" height="2224"/>
    </item>
    <item>
      <title>Demystifying delayed aesthetic evaluation: Part 1</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2022-03-10-ggplot2-delayed-aes-1</link>
      <description>Exploring the logic of `after_stat()` to peek inside ggplot internals</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>ggplot internals</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2022-03-10-ggplot2-delayed-aes-1</guid>
      <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2022-03-10-ggplot2-delayed-aes-1/preview.png" medium="image" type="image/png" width="1457" height="872"/>
    </item>
    <item>
      <title>Setting up and debugging custom fonts</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts</link>
      <description>A practical introduction to all (new) things font in R</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>typography</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts</guid>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts/preview.png" medium="image" type="image/png" width="709" height="612"/>
    </item>
    <item>
      <title>Random Sampling: A table animation</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2021-01-17-random-sampling-a-table-animation</link>
      <description>Plus a convenient way of rendering LaTeX expressions as images</description>
      <category>data visualization</category>
      <category>data wrangling</category>
      <guid>https://yjunechoe.github.io/posts/2021-01-17-random-sampling-a-table-animation</guid>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2021-01-17-random-sampling-a-table-animation/table_preview.png" medium="image" type="image/png" width="1185" height="1180"/>
    </item>
    <item>
      <title>Collapse repetitive piping with reduce()</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-12-13-collapse-repetitive-piping-with-reduce</link>
      <description>Featuring accumulate()</description>
      <category>data wrangling</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-12-13-collapse-repetitive-piping-with-reduce</guid>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-12-13-collapse-repetitive-piping-with-reduce/reduce_ggplot.png" medium="image" type="image/png" width="1233" height="775"/>
    </item>
    <item>
      <title>Plot Makeover #2</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-11-08-plot-makeover-2</link>
      <description>Making a dodged-stacked hybrid bar plot in {ggplot2}</description>
      <category>plot makeover</category>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-11-08-plot-makeover-2</guid>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-11-08-plot-makeover-2/plot-makeover-2_files/figure-html5/final-1.png" medium="image" type="image/png" width="1344" height="1152"/>
    </item>
    <item>
      <title>TidyTuesday 2020 week 45</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-11-03-tidytuesday-2020-week-45</link>
      <description>Waffle chart of IKEA furnitures in stock</description>
      <category>ggplot2</category>
      <category>data visualization</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-11-03-tidytuesday-2020-week-45</guid>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-11-03-tidytuesday-2020-week-45/preview.png" medium="image" type="image/png" width="4443" height="2950"/>
    </item>
    <item>
      <title>TidyTuesday 2020 week 44</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-10-28-tidytuesday-2020-week-44</link>
      <description>Patched animation of the location and cumulative capacity of wind turbines in Canada</description>
      <category>ggplot2</category>
      <category>gganimate</category>
      <category>spatial</category>
      <category>data visualization</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-10-28-tidytuesday-2020-week-44</guid>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-10-28-tidytuesday-2020-week-44/preview.png" medium="image" type="image/png" width="735" height="541"/>
    </item>
    <item>
      <title>Analysis of @everycolorbot's tweets</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-10-22-analysis-of-everycolorbots-tweets</link>
      <description>And why you should avoid neon colors</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>rtweet</category>
      <category>colors</category>
      <guid>https://yjunechoe.github.io/posts/2020-10-22-analysis-of-everycolorbots-tweets</guid>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-10-22-analysis-of-everycolorbots-tweets/preview.png" medium="image" type="image/png" width="2433" height="2259"/>
    </item>
    <item>
      <title>Designing guiding aesthetics</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-10-13-designing-guiding-aesthetics</link>
      <description>The fine line between creativity and noise</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-10-13-designing-guiding-aesthetics</guid>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-10-13-designing-guiding-aesthetics/preview.png" medium="image" type="image/png" width="8503" height="6377"/>
    </item>
    <item>
      <title>Demystifying stat_ layers in {ggplot2}</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-26-demystifying-stat-layers-ggplot2</link>
      <description>The motivation behind stat, the distinction between stat and geom, and a case study of stat_summary()</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-26-demystifying-stat-layers-ggplot2</guid>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-26-demystifying-stat-layers-ggplot2/preview.png" medium="image" type="image/png" width="240" height="278"/>
    </item>
    <item>
      <title>TidyTuesday 2020 week 39</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-23-tidytuesday-2020-week-39</link>
      <description>Stacked area plot of the heights of Himalayan peaks attempted over the last century</description>
      <category>ggplot2</category>
      <category>data visualization</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-23-tidytuesday-2020-week-39</guid>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-23-tidytuesday-2020-week-39/preview.png" medium="image" type="image/png" width="7086" height="4251"/>
    </item>
    <item>
      <title>Plot Makeover #1</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-20-plot-makeover-1</link>
      <description>Flattening a faceted grid for strictly horizontal comparisons</description>
      <category>plot makeover</category>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-20-plot-makeover-1</guid>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-20-plot-makeover-1/plot-makeover-1_files/figure-html5/after_bar_plot-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>TidyTuesday 2020 week 38</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-14-tidytuesday-2020-week-38</link>
      <description>Visualizing two decades of primary and secondary education spending with {gt}</description>
      <category>tables</category>
      <category>data visualization</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-14-tidytuesday-2020-week-38</guid>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-14-tidytuesday-2020-week-38/preview.png" medium="image" type="image/png" width="1703" height="2203"/>
    </item>
    <item>
      <title>Embedding videos in {reactable} tables</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-12-videos-in-reactable</link>
      <description>Pushing the limits of expandable row details</description>
      <category>tables</category>
      <category>data visualization</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-12-videos-in-reactable</guid>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-12-videos-in-reactable/preview.png" medium="image" type="image/png" width="808" height="617"/>
    </item>
    <item>
      <title>Fonts for graphs</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-06-fonts-for-graphs</link>
      <description>A small collection of my favorite fonts for data visualization</description>
      <category>data visualization</category>
      <category>typography</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-06-fonts-for-graphs</guid>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-06-fonts-for-graphs/preview.png" medium="image" type="image/png" width="1144" height="675"/>
    </item>
    <item>
      <title>TidyTuesday 2020 Week 33</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-08-17-tidytuesday-2020-week-33</link>
      <description>An animation of the main characters in Avatar</description>
      <category>tidytuesday</category>
      <category>gganimate</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-08-17-tidytuesday-2020-week-33</guid>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-08-17-tidytuesday-2020-week-33/preview.png" medium="image" type="image/png" width="1289" height="964"/>
    </item>
    <item>
      <title>Saving a line of piping</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-08-07-saving-a-line-of-piping</link>
      <description>Some notes on lesser known functions/functionalities that combine common chain of {dplyr} verbs.</description>
      <category>data wrangling</category>
      <category>dplyr</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-08-07-saving-a-line-of-piping</guid>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-08-07-saving-a-line-of-piping/preview.png" medium="image" type="image/png" width="877" height="372"/>
    </item>
    <item>
      <title>TidyTuesday 2020 Week 32</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-08-04-tidytuesday-2020-week-32</link>
      <description>A dumbbell chart visualization of energy production trends among European countries</description>
      <category>tidytuesday</category>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-08-04-tidytuesday-2020-week-32</guid>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-08-04-tidytuesday-2020-week-32/preview.png" medium="image" type="image/png" width="1444" height="805"/>
    </item>
    <item>
      <title>Six years of my Spotify playlists</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-07-29-six-years-of-my-spotify-playlists</link>
      <description>An analysis of acoustic features with {spotifyr}</description>
      <category>ggplot2</category>
      <category>gganimate</category>
      <category>spotifyr</category>
      <category>data wrangling</category>
      <category>data visualization</category>
      <guid>https://yjunechoe.github.io/posts/2020-07-29-six-years-of-my-spotify-playlists</guid>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-07-29-six-years-of-my-spotify-playlists/preview.png" medium="image" type="image/png" width="3593" height="2459"/>
    </item>
    <item>
      <title>Shiny tips - the first set</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-07-20-shiny-tips-1</link>
      <description>%||%, imap() + {shinybusy}, and user inputs in modalDialog()</description>
      <category>shiny</category>
      <guid>https://yjunechoe.github.io/posts/2020-07-20-shiny-tips-1</guid>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-07-20-shiny-tips-1/preview.png" medium="image" type="image/png" width="746" height="133"/>
    </item>
    <item>
      <title>geom_paired_raincloud()</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-07-13-geom-paired-raincloud</link>
      <description>A {ggplot2} geom for visualizing change in distribution between two conditions.</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-07-13-geom-paired-raincloud</guid>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-07-13-geom-paired-raincloud/preview.png" medium="image" type="image/png" width="7086" height="4251"/>
    </item>
    <item>
      <title>Plotting treemaps with {treemap} and {ggplot2}</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-06-30-treemap-with-ggplot</link>
      <description>Using underlying plot data for maximum customization</description>
      <category>data visualization</category>
      <category>treemap</category>
      <category>ggplot2</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-06-30-treemap-with-ggplot</guid>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-06-30-treemap-with-ggplot/2020-06-30-treemap-with-ggplot_files/figure-html5/unnamed-chunk-12-1.png" medium="image" type="image/png" width="1920" height="768"/>
    </item>
    <item>
      <title>Indexing tip for {spacyr}</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-06-25-indexing-tip-for-spacyr</link>
      <description>Speeding up the analysis of dependency relations.</description>
      <category>data wrangling</category>
      <category>NLP</category>
      <category>spacyr</category>
      <guid>https://yjunechoe.github.io/posts/2020-06-25-indexing-tip-for-spacyr</guid>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-06-25-indexing-tip-for-spacyr/preview.png" medium="image" type="image/png" width="1920" height="686"/>
    </item>
    <item>
      <title>The Correlation Parameter in Mixed Effects Models</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-06-07-correlation-parameter-mem</link>
      <description>Notes on the Corr term in {lme4} output</description>
      <category>statistics</category>
      <category>mixed-effects models</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-06-07-correlation-parameter-mem</guid>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-06-07-correlation-parameter-mem/preview.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
  </channel>
</rss>
