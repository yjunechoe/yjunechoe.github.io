<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>June Choe</title>
    <link>https://yjunechoe.github.io</link>
    <atom:link href="https://yjunechoe.github.io/blog.xml" rel="self" type="application/rss+xml"/>
    <description>Personal Blog
</description>
    <image>
      <title>June Choe</title>
      <url>https://yjunechoe.github.io/static/img/icon.png</url>
      <link>https://yjunechoe.github.io</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Tue, 05 Mar 2024 00:00:00 +0000</lastBuildDate>
    <item>
      <title>args(args(args)(args))</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2024-03-04-args-args-args-args</link>
      <description>


&lt;p&gt;The kind of blog posts that I have the most fun writing are those
where I hyperfocus on a single function, like &lt;a
href="https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations/"&gt;dplyr::slice()&lt;/a&gt;,
&lt;a
href="https://yjunechoe.github.io/posts/2020-12-13-collapse-repetitive-piping-with-reduce/"&gt;purrr::reduce()&lt;/a&gt;,
and &lt;a
href="https://yjunechoe.github.io/posts/2020-09-26-demystifying-stat-layers-ggplot2/"&gt;ggplot2::stat_summary()&lt;/a&gt;.
In writing blog posts of this kind, I naturally come across a point
where I need to introduce the argument(s) that the function takes. I
usually talk about them one at a time as needed, but I &lt;em&gt;could&lt;/em&gt;
start by front-loading that important piece of information first.&lt;/p&gt;
&lt;p&gt;In fact, there’s a function in R that lets me do exactly that, called
&lt;code&gt;args()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="args"&gt;&lt;code&gt;args()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;args()&lt;/code&gt; is, in theory, a very neat function. According to
&lt;code&gt;?args&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Displays the argument names and corresponding default values of a
(non-primitive or primitive) function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, for example, I know that &lt;code&gt;sum()&lt;/code&gt; takes the arguments
&lt;code&gt;...&lt;/code&gt; and &lt;code&gt;na.rm&lt;/code&gt; (with the
&lt;code&gt;na.rm = FALSE&lt;/code&gt; default). The role of &lt;code&gt;args()&lt;/code&gt; is
to display exactly that piece of information using R code. This blog
runs on rmarkdown, so surely I can use &lt;code&gt;args()&lt;/code&gt; as a
convenient and fancy way of showing information about a function’s
arguments to my readers.&lt;/p&gt;
&lt;p&gt;In this blog post, I want to talk about &lt;code&gt;args()&lt;/code&gt;. So let’s
start by looking at the argument that &lt;code&gt;args()&lt;/code&gt; takes.&lt;/p&gt;
&lt;p&gt;Of course, I could just print &lt;code&gt;args&lt;/code&gt; in the console:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (name) 
  .Internal(args(name))
  &amp;lt;bytecode: 0x0000024f98dbd180&amp;gt;
  &amp;lt;environment: namespace:base&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But wouldn’t it be fun if I used &lt;code&gt;args()&lt;/code&gt; itself to get
this information?&lt;/p&gt;
&lt;h2 id="argsargs"&gt;&lt;code&gt;args(args)&lt;/code&gt;&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;args(args)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (name) 
  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, so I get the &lt;code&gt;function (name)&lt;/code&gt; piece, which is the
information I wanted to show. We can see that &lt;code&gt;args()&lt;/code&gt; takes
one argument, called &lt;code&gt;name&lt;/code&gt;, with no defaults.&lt;/p&gt;
&lt;p&gt;But wait - what’s that &lt;code&gt;NULL&lt;/code&gt; doing there in the second
line?&lt;/p&gt;
&lt;p&gt;Hmm, I wonder if they forgot to &lt;code&gt;invisible()&lt;/code&gt;-y return the
&lt;code&gt;NULL&lt;/code&gt;. &lt;code&gt;args()&lt;/code&gt; is a function for
&lt;em&gt;displaying&lt;/em&gt; a function’s arguments after all, so maybe the
arguments are printed to the console as a side-effect and the actual
output of &lt;code&gt;args()&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If that is true, we should be able to suppress the printing of
&lt;code&gt;NULL&lt;/code&gt; with &lt;code&gt;invisible()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;invisible(args(args))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Uh oh, now &lt;em&gt;everything&lt;/em&gt; is invisible.&lt;/p&gt;
&lt;p&gt;Alright, enough games! What exactly are you, output of
&lt;code&gt;args()&lt;/code&gt;?!&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;typeof(args(args))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1] &amp;quot;closure&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What?&lt;/p&gt;
&lt;h2 id="argsargsargs"&gt;&lt;code&gt;args(args)(args)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Turns out that &lt;code&gt;args(args)&lt;/code&gt; is actually returning a whole
function that’s a &lt;em&gt;copy&lt;/em&gt; of &lt;code&gt;args()&lt;/code&gt;, except with its
body replaced with NULL.&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;args(args)&lt;/code&gt; is itself a function that takes an
argument called &lt;code&gt;name&lt;/code&gt; and then returns &lt;code&gt;NULL&lt;/code&gt;.
Let’s assign it to a variable and call it like a function:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;abomination &amp;lt;- args(args)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;abomination(123)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;abomination(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;abomination(stop())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The body is &lt;em&gt;just&lt;/em&gt; &lt;code&gt;NULL&lt;/code&gt;, so the function doesn’t
care what it receives&lt;a href="#fn1" class="footnote-ref"
id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; - it just returns &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In fact, we could even pass it… &lt;code&gt;args&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args(args)(args)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="argsargsargsargs"&gt;&lt;code&gt;args(args(args)(args))&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;But wait, that’s not all! &lt;code&gt;args()&lt;/code&gt; doesn’t &lt;em&gt;just&lt;/em&gt;
accept a function as its argument. From the documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Value&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;NULL in case of a non-function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So yeah - if &lt;code&gt;args()&lt;/code&gt; receives a non-function, it just
returns &lt;code&gt;NULL&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args(123)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;args(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This applies to &lt;em&gt;any&lt;/em&gt; non-function, including…
&lt;code&gt;NULL&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args(NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And recall that:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;is.null( args(args)(args) )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Therefore, this is a valid expression in base R:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args(args(args)(args))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="ad-infinitum"&gt;ad infinitum&lt;/h2&gt;
&lt;p&gt;For our cursed usecase of using &lt;code&gt;args(f)&lt;/code&gt; to return a copy
of &lt;code&gt;f&lt;/code&gt; with it’s body replaced with &lt;code&gt;NULL&lt;/code&gt; only to
then immediately call &lt;code&gt;args(f)(f)&lt;/code&gt; to return
&lt;code&gt;NULL&lt;/code&gt;, it really doesn’t matter what the identity of
&lt;code&gt;f&lt;/code&gt; is as long as it’s a function.&lt;/p&gt;
&lt;p&gt;That function can even be … &lt;code&gt;args(args)&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;So let’s take our &lt;code&gt;args(args(args)(args))&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args( args( args )( args ))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And swap every &lt;code&gt;args()&lt;/code&gt; with &lt;code&gt;args(args)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args(args)( args(args)( args(args) )( args(args) ))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or better yet, swap every &lt;code&gt;args()&lt;/code&gt; with
&lt;code&gt;args(args(args))&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args(args(args))( args(args(args))( args(args(args)) )( args(args(args)) ))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above unhinged examples are a product of two patterns:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;&lt;p&gt;The fact that you always get &lt;code&gt;function (name) NULL&lt;/code&gt;
from wrapping &lt;code&gt;args()&lt;/code&gt;s over &lt;code&gt;args&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;list(
  args(          args),
  args(     args(args)),
  args(args(args(args)))
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [[1]]
  function (name) 
  NULL

  [[2]]
  function (name) 
  NULL

  [[3]]
  function (name) 
  NULL&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The fact that you can get this whole thing to return
&lt;code&gt;NULL&lt;/code&gt; by having &lt;code&gt;function (name) NULL&lt;/code&gt; call the
function object &lt;code&gt;args&lt;/code&gt;. You can do this anywhere in the stack
and the &lt;code&gt;NULL&lt;/code&gt; will simply propagate:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;list(
  args(args(args(args))) (args)   ,
  args(args(args(args))  (args) ) ,
  args(args(args(args)   (args) ))
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [[1]]
  NULL

  [[2]]
  NULL

  [[3]]
  NULL&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We could keep going but it’s tiring to type out and read all these
nested &lt;code&gt;args()&lt;/code&gt;… but did you know that there’s this thing
called the pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt; that’s the solution to all code
readability issues?&lt;/p&gt;
&lt;h2 id="had-enough-args-yet"&gt;Had enough &lt;code&gt;args()&lt;/code&gt; yet?&lt;/h2&gt;
&lt;p&gt;Let’s make an &lt;code&gt;args()&lt;/code&gt; factory &lt;code&gt;ARGS()&lt;/code&gt; …&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(magrittr)
ARGS &amp;lt;- function(n) {
  Reduce(
    f = \(x,y) bquote(.(x) %&amp;gt;% args()),
    x = seq_len(n),
    init = quote(args)
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… to produce a sequence of &lt;code&gt;args()&lt;/code&gt; …&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ARGS(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  args %&amp;gt;% args() %&amp;gt;% args() %&amp;gt;% args() %&amp;gt;% args() %&amp;gt;% args() %&amp;gt;% 
      args() %&amp;gt;% args() %&amp;gt;% args() %&amp;gt;% args() %&amp;gt;% args()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;eval(ARGS(10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (name) 
  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and tidy it up!&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ARGS(10) %&amp;gt;% 
  deparse1() %&amp;gt;% 
  styler::style_text()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  args %&amp;gt;%
    args() %&amp;gt;%
    args() %&amp;gt;%
    args() %&amp;gt;%
    args() %&amp;gt;%
    args() %&amp;gt;%
    args() %&amp;gt;%
    args() %&amp;gt;%
    args() %&amp;gt;%
    args() %&amp;gt;%
    args()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wanna see even more unhinged?&lt;/p&gt;
&lt;p&gt;Let’s try to produce a “matrix” of &lt;code&gt;args()&lt;/code&gt;. You get a
choice of &lt;code&gt;i&lt;/code&gt; “rows” of piped lines, and &lt;code&gt;j&lt;/code&gt;
“columns” of &lt;code&gt;args()&lt;/code&gt;-around-&lt;code&gt;args&lt;/code&gt; each time -
all to produce a &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ready?&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ARGS2 &amp;lt;- function(i, j) {
  Reduce(
    f = \(x,y) bquote(.(x) %&amp;gt;% (.(y))),
    x = rep(list(Reduce(\(x,y) call(&amp;quot;args&amp;quot;, x), seq_len(j), quote(args))), i)
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;ARGS2(5, 1) %&amp;gt;% 
  deparse1() %&amp;gt;%
  styler::style_text()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  args(args) %&amp;gt;%
    (args(args)) %&amp;gt;%
    (args(args)) %&amp;gt;%
    (args(args)) %&amp;gt;%
    (args(args))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;ARGS2(5, 3) %&amp;gt;% 
  deparse1() %&amp;gt;%
  styler::style_text()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  args(args(args(args))) %&amp;gt;%
    (args(args(args(args)))) %&amp;gt;%
    (args(args(args(args)))) %&amp;gt;%
    (args(args(args(args)))) %&amp;gt;%
    (args(args(args(args))))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;ARGS2(10, 5) %&amp;gt;% 
  deparse1() %&amp;gt;%
  styler::style_text()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  args(args(args(args(args(args))))) %&amp;gt;%
    (args(args(args(args(args(args)))))) %&amp;gt;%
    (args(args(args(args(args(args)))))) %&amp;gt;%
    (args(args(args(args(args(args)))))) %&amp;gt;%
    (args(args(args(args(args(args)))))) %&amp;gt;%
    (args(args(args(args(args(args)))))) %&amp;gt;%
    (args(args(args(args(args(args)))))) %&amp;gt;%
    (args(args(args(args(args(args)))))) %&amp;gt;%
    (args(args(args(args(args(args)))))) %&amp;gt;%
    (args(args(args(args(args(args))))))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;list(
  eval(ARGS2(5, 1)),
  eval(ARGS2(5, 3)),
  eval(ARGS2(10, 5))
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [[1]]
  NULL
  
  [[2]]
  NULL
  
  [[3]]
  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yay!&lt;/p&gt;
&lt;h2 id="tldr-str"&gt;TL;DR: &lt;code&gt;str()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;If you want a version of &lt;code&gt;args()&lt;/code&gt; that does what it’s
supposed to, use &lt;code&gt;str()&lt;/code&gt; instead:&lt;a href="#fn2"
class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;str(args)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (name)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;str(sum)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (..., na.rm = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;args()&lt;/code&gt; is hereafter banned from my blog.&lt;/p&gt;
&lt;h2 id="coda-serious-redesigning-args"&gt;Coda (serious): redesigning
&lt;code&gt;args()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The context for my absurd rant above is that &lt;a
href="https://fosstodon.org/@yjunechoe/112039945400602627"&gt;I was just
complaining&lt;/a&gt; about how I think &lt;code&gt;args()&lt;/code&gt; is a rather poorly
designed function.&lt;/p&gt;
&lt;p&gt;Let’s try to redesign &lt;code&gt;args()&lt;/code&gt;. I’ll do three takes:&lt;/p&gt;
&lt;h3 id="take-1-display-is-the-side-effect-output-is-trivial"&gt;Take 1)
Display is the side-effect; output is trivial&lt;/h3&gt;
&lt;p&gt;If the whole point of &lt;code&gt;args()&lt;/code&gt; is to
&lt;strong&gt;display&lt;/strong&gt; a function’s arguments for inspection in
interactive usage, then that can simply be done as a side-effect.&lt;/p&gt;
&lt;p&gt;As I said above, &lt;code&gt;str()&lt;/code&gt; surprisingly has this more
sensible behavior out of the box. So let’s write our first redesign of
&lt;code&gt;args()&lt;/code&gt; which just calls &lt;code&gt;str()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args1 &amp;lt;- function(name) {
  str(name)
}
args1(sum)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (..., na.rm = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;args1()&lt;/code&gt;/&lt;code&gt;str()&lt;/code&gt;, information about the
function arguments are sent to the console.&lt;a href="#fn3"
class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; We know this because
we can’t suppress this with &lt;code&gt;invisible&lt;/code&gt; but we &lt;em&gt;can&lt;/em&gt;
grab this via &lt;code&gt;capture.output&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;invisible( args1(sum) )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (..., na.rm = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;capture.output( args1(sum) )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1] &amp;quot;function (..., na.rm = FALSE)  &amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For functions whose purpose is to signal information to the console
(and whose usage is limited to interactive contexts), we don’t
particularly care about the output. In fact, because the focus isn’t on
the output, the return value should be as &lt;em&gt;trivial&lt;/em&gt; as
possible.&lt;/p&gt;
&lt;p&gt;A &lt;a
href="https://design.tidyverse.org/out-invisible.html"&gt;recommended
option&lt;/a&gt; is to just invisibly return &lt;code&gt;NULL&lt;/code&gt;. This is now
how &lt;code&gt;args1()&lt;/code&gt; does it (via &lt;code&gt;str()&lt;/code&gt;).&lt;a href="#fn4"
class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;print( args1(sum) )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (..., na.rm = FALSE)  
  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;is.null( args1(sum) )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (..., na.rm = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, the function could just invisibly return what it
receives,&lt;a href="#fn5" class="footnote-ref"
id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; which is another common pattern for cases
like this. Again, we return invisibly to avoid distracting from the fact
that the point of the function is to &lt;em&gt;display&lt;/em&gt; as the
side-effect.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args2 &amp;lt;- function(name) {
  str(sum)
  invisible(name)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;args2(rnorm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (..., na.rm = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;args2(rnorm)(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (..., na.rm = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1]  0.9164464  1.5802621 -1.3677842  0.1642751 -0.5970638&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="take-2-display-is-the-side-effect-output-is-meaningful"&gt;Take 2)
Display is the side-effect; output is meaningful&lt;/h3&gt;
&lt;p&gt;One thing I neglected to mention in this blog post is that there are
other ways to extract a function’s arguments. One of them is
&lt;code&gt;formals()&lt;/code&gt;:&lt;a href="#fn6" class="footnote-ref"
id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;formals(args)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  $name&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;formals(rnorm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  $n
  
  
  $mean
  [1] 0
  
  $sd
  [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;formals()&lt;/code&gt; returns the information about a function’s
arguments in a list which is pretty boring, but it’s an object we can
manipulate (unlike the return value of &lt;code&gt;str()&lt;/code&gt;). So there’s
some pros and cons.&lt;/p&gt;
&lt;p&gt;Actually, we could just combine both &lt;code&gt;formals()&lt;/code&gt; and
&lt;code&gt;str()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args3 &amp;lt;- function(name) {
  str(name)
  invisible(formals(name))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;arguments &amp;lt;- args3(rnorm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (n, mean = 0, sd = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  $n
  
  
  $mean
  [1] 0
  
  $sd
  [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;arguments$mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You get the nice display as a side-effect (via &lt;code&gt;str()&lt;/code&gt;)
and then an informative output (via &lt;code&gt;formals()&lt;/code&gt;). You could
even turn this into a class with a print method, which is definitely the
better way to go about this, but I’m running out of steam here and I
don’t like OOP, so I won’t touch that here.&lt;/p&gt;
&lt;h3 id="take-3-just-remove-the-null"&gt;Take 3) Just remove the
&lt;code&gt;NULL&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This last redesign is the simplest of the three, and narrowly deals
with the problem of that pesky &lt;code&gt;NULL&lt;/code&gt; shown alongside the
function arguments:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args(sum)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (..., na.rm = FALSE) 
  NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fine, I’ll give them that &lt;code&gt;args()&lt;/code&gt; must, for
&lt;del&gt;compatibility with S&lt;/del&gt; whatever reason, return a whole new
function object, which in turn requires a function body. But if that
function is just as a placeholder and not meant to be called, can’t you
just make the function body, like, empty?&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;args4 &amp;lt;- function(name) {
  f &amp;lt;- args(name)
  body(f) &amp;lt;- quote(expr=)
  f
}
args4(sum)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (..., na.rm = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;args4(rnorm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (n, mean = 0, sd = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;typeof( args4(rnorm) )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1] &amp;quot;closure&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like, come on!&lt;/p&gt;
&lt;h2 id="sessioninfo"&gt;sessionInfo()&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;sessionInfo()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  R version 4.3.3 (2024-02-29 ucrt)
  Platform: x86_64-w64-mingw32/x64 (64-bit)
  Running under: Windows 11 x64 (build 22631)
  
  Matrix products: default
  
  
  locale:
  [1] LC_COLLATE=English_United States.utf8 
  [2] LC_CTYPE=English_United States.utf8   
  [3] LC_MONETARY=English_United States.utf8
  [4] LC_NUMERIC=C                          
  [5] LC_TIME=English_United States.utf8    
  
  time zone: America/New_York
  tzcode source: internal
  
  attached base packages:
  [1] stats     graphics  grDevices utils     datasets  methods   base     
  
  other attached packages:
  [1] magrittr_2.0.3
  
  loaded via a namespace (and not attached):
   [1] jsonlite_1.8.8    compiler_4.3.3    crayon_1.5.2      xml2_1.3.6       
   [5] jquerylib_0.1.4   png_0.1-8         yaml_2.3.7        fastmap_1.1.1    
   [9] mime_0.12         R6_2.5.1          generics_0.1.3    knitr_1.45       
  [13] bookdown_0.37     distill_1.6       rprojroot_2.0.4   openssl_2.1.1    
  [17] lubridate_1.9.3   R.cache_0.16.0    bslib_0.6.1       R.utils_2.12.3   
  [21] rlang_1.1.2       cachem_1.0.8      prettycode_1.1.0  xfun_0.41        
  [25] sass_0.4.7        timechange_0.2.0  memoise_2.0.1     cli_3.6.1        
  [29] withr_3.0.0       digest_0.6.33     rstudioapi_0.15.0 fontawesome_0.5.2
  [33] askpass_1.2.0     lifecycle_1.0.4   R.methodsS3_1.8.2 R.oo_1.25.0      
  [37] vctrs_0.6.5       downlit_0.4.3     evaluate_0.23     styler_1.10.2    
  [41] fansi_1.0.5       rmarkdown_2.25    purrr_1.0.2       tools_4.3.3      
  [45] htmltools_0.5.7&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes footnotes-end-of-document"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;You can even see lazy evaluation in action when it
receives &lt;code&gt;stop()&lt;/code&gt; without erroring.&lt;a href="#fnref1"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Though you have to remove the &lt;code&gt;"srcref"&lt;/code&gt;
attribute if the function has one. But also don’t actually do this!&lt;a
href="#fnref2" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Technically, the &lt;code&gt;"output"&lt;/code&gt; stream.&lt;a
href="#fnref3" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;For the longest time, I thought &lt;code&gt;args()&lt;/code&gt; was
doing this from how its output looked.&lt;a href="#fnref4"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Essentially acting like &lt;code&gt;identity()&lt;/code&gt;.&lt;a
href="#fnref5" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;But note that it has a &lt;a
href="https://adv-r.hadley.nz/functions.html?q=formals#primitive-functions"&gt;special
behavior&lt;/a&gt; of returning &lt;code&gt;NULL&lt;/code&gt; for primitive functions
(written in C) that clearly have user-facing arguments on the R side.
See also &lt;code&gt;formalArgs()&lt;/code&gt;, for a shortcut to
&lt;code&gt;names(formals())&lt;/code&gt;&lt;a href="#fnref6"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>a7c2de69010eda0d57a43eca8dcdc41d</distill:md5>
      <category>args</category>
      <category>metaprogramming</category>
      <guid>https://yjunechoe.github.io/posts/2024-03-04-args-args-args-args</guid>
      <pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2024-03-04-args-args-args-args/preview.png" medium="image" type="image/png" width="419" height="300"/>
    </item>
    <item>
      <title>HelloWorld("print")</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2024-02-20-helloworld-print</link>
      <description>R is a language optimized for meme-ing</description>
      <category>metaprogramming</category>
      <guid>https://yjunechoe.github.io/posts/2024-02-20-helloworld-print</guid>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2024-02-20-helloworld-print/preview.png" medium="image" type="image/png" width="462" height="184"/>
    </item>
    <item>
      <title>2023 Year in Review</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2023-12-31-2023-year-in-review</link>
      <description>Reflections and updates on what I've been up to in 2023</description>
      <category>reflections</category>
      <guid>https://yjunechoe.github.io/posts/2023-12-31-2023-year-in-review</guid>
      <pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2023-12-31-2023-year-in-review/preview.png" medium="image" type="image/png" width="1512" height="1371"/>
    </item>
    <item>
      <title>The many ways to (un)tidy-select</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2023-12-03-untidy-select</link>
      <description>Deconstructing {tidyselect} and building it back up</description>
      <category>data wrangling</category>
      <category>dplyr</category>
      <category>tidyselect</category>
      <guid>https://yjunechoe.github.io/posts/2023-12-03-untidy-select</guid>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2023-12-03-untidy-select/preview.png" medium="image" type="image/png" width="957" height="664"/>
    </item>
    <item>
      <title>Fumbling my way through an XY problem</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2023-07-09-x-y-problem</link>
      <description>Some lessons learned from a (personal) case study</description>
      <category>reflections</category>
      <guid>https://yjunechoe.github.io/posts/2023-07-09-x-y-problem</guid>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2023-07-09-x-y-problem/preview.png" medium="image" type="image/png" width="238" height="205"/>
    </item>
    <item>
      <title>Row relational operations with slice()</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations</link>
      <description>A love letter to dplyr::slice() and a gallery of usecases</description>
      <category>data wrangling</category>
      <category>dplyr</category>
      <guid>https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations</guid>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations/preview.png" medium="image" type="image/png" width="1800" height="1080"/>
    </item>
    <item>
      <title>First impressions of DataFrames.jl and accessories</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2022-11-13-dataframes-jl-and-accessories</link>
      <description>Perspectives from a {dplyr} and {data.table} useR</description>
      <category>julia</category>
      <category>data wrangling</category>
      <category>DataFrames.jl</category>
      <category>dplyr</category>
      <category>data.table</category>
      <guid>https://yjunechoe.github.io/posts/2022-11-13-dataframes-jl-and-accessories</guid>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2022-11-13-dataframes-jl-and-accessories/preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Reflections on useR! 2022</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2022-07-30-user2022</link>
      <description>Notes from attending and speaking at my first R conference</description>
      <category>conference</category>
      <category>ggtrace</category>
      <guid>https://yjunechoe.github.io/posts/2022-07-30-user2022</guid>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2022-07-30-user2022/preview.png" medium="image" type="image/png" width="520" height="260"/>
    </item>
    <item>
      <title>Demystifying delayed aesthetic evaluation: Part 2</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2022-07-06-ggplot2-delayed-aes-2</link>
      <description>Exposing the `Stat` ggproto in functional programming terms</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2022-07-06-ggplot2-delayed-aes-2</guid>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2022-07-06-ggplot2-delayed-aes-2/preview.png" medium="image" type="image/png" width="3469" height="2224"/>
    </item>
    <item>
      <title>Demystifying delayed aesthetic evaluation: Part 1</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2022-03-10-ggplot2-delayed-aes-1</link>
      <description>Exploring the logic of `after_stat()` to peek inside ggplot internals</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>ggplot internals</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2022-03-10-ggplot2-delayed-aes-1</guid>
      <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2022-03-10-ggplot2-delayed-aes-1/preview.png" medium="image" type="image/png" width="1457" height="872"/>
    </item>
    <item>
      <title>Setting up and debugging custom fonts</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts</link>
      <description>A practical introduction to all (new) things font in R</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>typography</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts</guid>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts/preview.png" medium="image" type="image/png" width="709" height="612"/>
    </item>
    <item>
      <title>Random Sampling: A table animation</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2021-01-17-random-sampling-a-table-animation</link>
      <description>Plus a convenient way of rendering LaTeX expressions as images</description>
      <category>data visualization</category>
      <category>data wrangling</category>
      <guid>https://yjunechoe.github.io/posts/2021-01-17-random-sampling-a-table-animation</guid>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2021-01-17-random-sampling-a-table-animation/table_preview.png" medium="image" type="image/png" width="1185" height="1180"/>
    </item>
    <item>
      <title>Collapse repetitive piping with reduce()</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-12-13-collapse-repetitive-piping-with-reduce</link>
      <description>Featuring accumulate()</description>
      <category>data wrangling</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-12-13-collapse-repetitive-piping-with-reduce</guid>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-12-13-collapse-repetitive-piping-with-reduce/reduce_ggplot.png" medium="image" type="image/png" width="1233" height="775"/>
    </item>
    <item>
      <title>Plot Makeover #2</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-11-08-plot-makeover-2</link>
      <description>Making a dodged-stacked hybrid bar plot in {ggplot2}</description>
      <category>plot makeover</category>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-11-08-plot-makeover-2</guid>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-11-08-plot-makeover-2/plot-makeover-2_files/figure-html5/final-1.png" medium="image" type="image/png" width="1344" height="1152"/>
    </item>
    <item>
      <title>TidyTuesday 2020 week 45</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-11-03-tidytuesday-2020-week-45</link>
      <description>Waffle chart of IKEA furnitures in stock</description>
      <category>ggplot2</category>
      <category>data visualization</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-11-03-tidytuesday-2020-week-45</guid>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-11-03-tidytuesday-2020-week-45/preview.png" medium="image" type="image/png" width="4443" height="2950"/>
    </item>
    <item>
      <title>TidyTuesday 2020 week 44</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-10-28-tidytuesday-2020-week-44</link>
      <description>Patched animation of the location and cumulative capacity of wind turbines in Canada</description>
      <category>ggplot2</category>
      <category>gganimate</category>
      <category>spatial</category>
      <category>data visualization</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-10-28-tidytuesday-2020-week-44</guid>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-10-28-tidytuesday-2020-week-44/preview.png" medium="image" type="image/png" width="735" height="541"/>
    </item>
    <item>
      <title>Analysis of @everycolorbot's tweets</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-10-22-analysis-of-everycolorbots-tweets</link>
      <description>And why you should avoid neon colors</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>rtweet</category>
      <category>colors</category>
      <guid>https://yjunechoe.github.io/posts/2020-10-22-analysis-of-everycolorbots-tweets</guid>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-10-22-analysis-of-everycolorbots-tweets/preview.png" medium="image" type="image/png" width="2433" height="2259"/>
    </item>
    <item>
      <title>Designing guiding aesthetics</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-10-13-designing-guiding-aesthetics</link>
      <description>The fine line between creativity and noise</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-10-13-designing-guiding-aesthetics</guid>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-10-13-designing-guiding-aesthetics/preview.png" medium="image" type="image/png" width="8503" height="6377"/>
    </item>
    <item>
      <title>Demystifying stat_ layers in {ggplot2}</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-26-demystifying-stat-layers-ggplot2</link>
      <description>The motivation behind stat, the distinction between stat and geom, and a case study of stat_summary()</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-26-demystifying-stat-layers-ggplot2</guid>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-26-demystifying-stat-layers-ggplot2/preview.png" medium="image" type="image/png" width="240" height="278"/>
    </item>
    <item>
      <title>TidyTuesday 2020 week 39</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-23-tidytuesday-2020-week-39</link>
      <description>Stacked area plot of the heights of Himalayan peaks attempted over the last century</description>
      <category>ggplot2</category>
      <category>data visualization</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-23-tidytuesday-2020-week-39</guid>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-23-tidytuesday-2020-week-39/preview.png" medium="image" type="image/png" width="7086" height="4251"/>
    </item>
    <item>
      <title>Plot Makeover #1</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-20-plot-makeover-1</link>
      <description>Flattening a faceted grid for strictly horizontal comparisons</description>
      <category>plot makeover</category>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-20-plot-makeover-1</guid>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-20-plot-makeover-1/plot-makeover-1_files/figure-html5/after_bar_plot-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>TidyTuesday 2020 week 38</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-14-tidytuesday-2020-week-38</link>
      <description>Visualizing two decades of primary and secondary education spending with {gt}</description>
      <category>tables</category>
      <category>data visualization</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-14-tidytuesday-2020-week-38</guid>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-14-tidytuesday-2020-week-38/preview.png" medium="image" type="image/png" width="1703" height="2203"/>
    </item>
    <item>
      <title>Embedding videos in {reactable} tables</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-12-videos-in-reactable</link>
      <description>Pushing the limits of expandable row details</description>
      <category>tables</category>
      <category>data visualization</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-12-videos-in-reactable</guid>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-12-videos-in-reactable/preview.png" medium="image" type="image/png" width="808" height="617"/>
    </item>
    <item>
      <title>Fonts for graphs</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-06-fonts-for-graphs</link>
      <description>A small collection of my favorite fonts for data visualization</description>
      <category>data visualization</category>
      <category>typography</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-06-fonts-for-graphs</guid>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-06-fonts-for-graphs/preview.png" medium="image" type="image/png" width="1144" height="675"/>
    </item>
    <item>
      <title>TidyTuesday 2020 Week 33</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-08-17-tidytuesday-2020-week-33</link>
      <description>An animation of the main characters in Avatar</description>
      <category>tidytuesday</category>
      <category>gganimate</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-08-17-tidytuesday-2020-week-33</guid>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-08-17-tidytuesday-2020-week-33/preview.png" medium="image" type="image/png" width="1289" height="964"/>
    </item>
    <item>
      <title>Saving a line of piping</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-08-07-saving-a-line-of-piping</link>
      <description>Some notes on lesser known functions/functionalities that combine common chain of {dplyr} verbs.</description>
      <category>data wrangling</category>
      <category>dplyr</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-08-07-saving-a-line-of-piping</guid>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-08-07-saving-a-line-of-piping/preview.png" medium="image" type="image/png" width="877" height="372"/>
    </item>
    <item>
      <title>TidyTuesday 2020 Week 32</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-08-04-tidytuesday-2020-week-32</link>
      <description>A dumbbell chart visualization of energy production trends among European countries</description>
      <category>tidytuesday</category>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-08-04-tidytuesday-2020-week-32</guid>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-08-04-tidytuesday-2020-week-32/preview.png" medium="image" type="image/png" width="1444" height="805"/>
    </item>
    <item>
      <title>Six years of my Spotify playlists</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-07-29-six-years-of-my-spotify-playlists</link>
      <description>An analysis of acoustic features with {spotifyr}</description>
      <category>ggplot2</category>
      <category>gganimate</category>
      <category>spotifyr</category>
      <category>data wrangling</category>
      <category>data visualization</category>
      <guid>https://yjunechoe.github.io/posts/2020-07-29-six-years-of-my-spotify-playlists</guid>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-07-29-six-years-of-my-spotify-playlists/preview.png" medium="image" type="image/png" width="3593" height="2459"/>
    </item>
    <item>
      <title>Shiny tips - the first set</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-07-20-shiny-tips-1</link>
      <description>%||%, imap() + {shinybusy}, and user inputs in modalDialog()</description>
      <category>shiny</category>
      <guid>https://yjunechoe.github.io/posts/2020-07-20-shiny-tips-1</guid>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-07-20-shiny-tips-1/preview.png" medium="image" type="image/png" width="746" height="133"/>
    </item>
    <item>
      <title>geom_paired_raincloud()</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-07-13-geom-paired-raincloud</link>
      <description>A {ggplot2} geom for visualizing change in distribution between two conditions.</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-07-13-geom-paired-raincloud</guid>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-07-13-geom-paired-raincloud/preview.png" medium="image" type="image/png" width="7086" height="4251"/>
    </item>
    <item>
      <title>Plotting treemaps with {treemap} and {ggplot2}</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-06-30-treemap-with-ggplot</link>
      <description>Using underlying plot data for maximum customization</description>
      <category>data visualization</category>
      <category>treemap</category>
      <category>ggplot2</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-06-30-treemap-with-ggplot</guid>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-06-30-treemap-with-ggplot/2020-06-30-treemap-with-ggplot_files/figure-html5/unnamed-chunk-12-1.png" medium="image" type="image/png" width="1920" height="768"/>
    </item>
    <item>
      <title>Indexing tip for {spacyr}</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-06-25-indexing-tip-for-spacyr</link>
      <description>Speeding up the analysis of dependency relations.</description>
      <category>data wrangling</category>
      <category>NLP</category>
      <category>spacyr</category>
      <guid>https://yjunechoe.github.io/posts/2020-06-25-indexing-tip-for-spacyr</guid>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-06-25-indexing-tip-for-spacyr/preview.png" medium="image" type="image/png" width="1920" height="686"/>
    </item>
    <item>
      <title>The Correlation Parameter in Mixed Effects Models</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-06-07-correlation-parameter-mem</link>
      <description>Notes on the Corr term in {lme4} output</description>
      <category>statistics</category>
      <category>mixed-effects models</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-06-07-correlation-parameter-mem</guid>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-06-07-correlation-parameter-mem/preview.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
  </channel>
</rss>
