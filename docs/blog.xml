<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>June Choe</title>
    <link>https://yjunechoe.github.io</link>
    <atom:link href="https://yjunechoe.github.io/blog.xml" rel="self" type="application/rss+xml"/>
    <description>Personal Blog
</description>
    <image>
      <title>June Choe</title>
      <url>https://yjunechoe.github.io/static/img/icon.png</url>
      <link>https://yjunechoe.github.io</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Sat, 08 Jun 2024 00:00:00 +0000</lastBuildDate>
    <item>
      <title>`ave()` for the average {dplyr} user</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2024-06-09-ave-for-the-average</link>
      <description>


&lt;p&gt;I think it’s safe to say that the average &lt;code&gt;{dplyr}&lt;/code&gt; user
does not know the &lt;code&gt;ave()&lt;/code&gt; function. For that audience, this
is a short appreciation post on &lt;code&gt;ave()&lt;/code&gt;, a case of tidyverse
&lt;em&gt;and&lt;/em&gt; base R.&lt;/p&gt;
&lt;h2 id="ave"&gt;&lt;code&gt;ave()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ave()&lt;/code&gt; is a split-apply-combine function in base R
(specifically, &lt;code&gt;{stats}&lt;/code&gt;). It’s a pretty short function -
maybe you can make out what it does from just reading the code&lt;a
href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ave&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  function (x, ..., FUN = mean) 
  {
      if (missing(...)) 
          x[] &amp;lt;- FUN(x)
      else {
          g &amp;lt;- interaction(...)
          split(x, g) &amp;lt;- lapply(split(x, g), FUN)
      }
      x
  }
  &amp;lt;bytecode: 0x0000020fc12974b8&amp;gt;
  &amp;lt;environment: namespace:stats&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Despite its (rather generic and uninformative) name, I like to think
of &lt;code&gt;ave()&lt;/code&gt; as actually belonging to the &lt;code&gt;*apply()&lt;/code&gt;
family of functions, having particularly close ties to
&lt;code&gt;tapply()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A unique feature of &lt;code&gt;ave()&lt;/code&gt; is the invariant that it
&lt;strong&gt;returns a vector of the same length as the input&lt;/strong&gt;. And
if you use an aggregating function like &lt;code&gt;sum()&lt;/code&gt; or
&lt;code&gt;mean()&lt;/code&gt;, it simply repeats those values over the
observations on the basis of their grouping.&lt;/p&gt;
&lt;p&gt;For example, whereas &lt;code&gt;tapply()&lt;/code&gt; can be used to summarize
the average &lt;code&gt;mpg&lt;/code&gt; by &lt;code&gt;cyl&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;tapply(mtcars$mpg, mtcars$cyl, FUN = mean)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         4        6        8 
  26.66364 19.74286 15.10000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same syntax with &lt;code&gt;ave()&lt;/code&gt; will repeat those values over
each element of the input vector:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ave(mtcars$mpg, mtcars$cyl, FUN = mean)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   [1] 19.74286 19.74286 26.66364 19.74286 15.10000 19.74286 15.10000 26.66364
   [9] 26.66364 19.74286 19.74286 15.10000 15.10000 15.10000 15.10000 15.10000
  [17] 15.10000 26.66364 26.66364 26.66364 26.66364 15.10000 15.10000 15.10000
  [25] 15.10000 26.66364 26.66364 26.66364 15.10000 19.74286 15.10000 26.66364&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also get to this output from &lt;code&gt;tapply()&lt;/code&gt; with an
extra step of vectorized indexing:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;tapply(mtcars$mpg, mtcars$cyl, FUN = mean)[as.character(mtcars$cyl)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         6        6        4        6        8        6        8        4 
  19.74286 19.74286 26.66364 19.74286 15.10000 19.74286 15.10000 26.66364 
         4        6        6        8        8        8        8        8 
  26.66364 19.74286 19.74286 15.10000 15.10000 15.10000 15.10000 15.10000 
         8        4        4        4        4        8        8        8 
  15.10000 26.66364 26.66364 26.66364 26.66364 15.10000 15.10000 15.10000 
         8        4        4        4        8        6        8        4 
  15.10000 26.66364 26.66364 26.66364 15.10000 19.74286 15.10000 26.66364&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="the-problem"&gt;The problem&lt;/h2&gt;
&lt;p&gt;Nothing sparks more joy than when a base R function helps you write
more “tidy” code. I’ve talked about this in length before with
&lt;code&gt;outer()&lt;/code&gt; in a &lt;a
href="https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations/"&gt;prior
blog post on &lt;code&gt;dplyr::slice()&lt;/code&gt;&lt;/a&gt;, and here I want to show a
cool &lt;code&gt;ave()&lt;/code&gt; + &lt;code&gt;dplyr::mutate()&lt;/code&gt; combo.&lt;/p&gt;
&lt;p&gt;This example is adapted from a reprex by &lt;a
href="https://cedricscherer.netlify.app/"&gt;Cédric Scherer&lt;/a&gt;&lt;a
href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; on the
DSLC (previously R4DS) slack.&lt;/p&gt;
&lt;p&gt;Given an input of multiple discrete columns and the frequencies of
these values:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;input &amp;lt;- data.frame(
  a = c(&amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;), 
  b = c(&amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;, &amp;quot;Y&amp;quot;, &amp;quot;Z&amp;quot;), 
  c = c(&amp;quot;M&amp;quot;, &amp;quot;N&amp;quot;, &amp;quot;O&amp;quot;, &amp;quot;O&amp;quot;), 
  freq = c(5, 12, 3, 7)
)
input&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    a b c freq
  1 A X M    5
  2 A Y N   12
  3 A Y O    3
  4 B Z O    7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The task is to add new columns named &lt;code&gt;freq_*&lt;/code&gt; that show
the total frequency of the values in each column:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;output &amp;lt;- data.frame(
  a = c(&amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;), 
  freq_a = c(20, 20, 20, 7),
  b = c(&amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;, &amp;quot;Y&amp;quot;, &amp;quot;Z&amp;quot;),
  freq_b = c(5, 15, 15, 7), 
  c = c(&amp;quot;M&amp;quot;, &amp;quot;N&amp;quot;, &amp;quot;O&amp;quot;, &amp;quot;O&amp;quot;), 
  freq_c = c(5, 12, 10, 10), 
  freq = c(5, 12, 3, 7)
)
output&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    a freq_a b freq_b c freq_c freq
  1 A     20 X      5 M      5    5
  2 A     20 Y     15 N     12   12
  3 A     20 Y     15 O     10    3
  4 B      7 Z      7 O     10    7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So for example, in column &lt;code&gt;a&lt;/code&gt; the value &lt;code&gt;"A"&lt;/code&gt;
is associated with values &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;12&lt;/code&gt;, and
&lt;code&gt;3&lt;/code&gt; in the &lt;code&gt;freq&lt;/code&gt; column, so a new
&lt;code&gt;freq_a&lt;/code&gt; column should be created to track their total
frequencies &lt;code&gt;5 + 12 + 3&lt;/code&gt; and associate that value
(&lt;code&gt;20&lt;/code&gt;) for all occurrences of &lt;code&gt;"A"&lt;/code&gt; in the
&lt;code&gt;a&lt;/code&gt; column.&lt;/p&gt;
&lt;h2 id="some-tidyverse-solutions"&gt;Some &lt;code&gt;{tidyverse}&lt;/code&gt;
solutions&lt;/h2&gt;
&lt;p&gt;The gut feeling is that this seems to lack a straightforwardly “tidy”
solution. I mean, the input isn’t even &lt;strong&gt;tidy&lt;/strong&gt;&lt;a
href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; in the
first place!&lt;/p&gt;
&lt;p&gt;So maybe we’d be better off starting with a pivoted tidy data for
constructing a tidy solution:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(tidyverse)
input %&amp;gt;% 
  pivot_longer(-freq)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  # A tibble: 12 × 3
      freq name  value
     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
   1     5 a     A    
   2     5 b     X    
   3     5 c     M    
   4    12 a     A    
   5    12 b     Y    
   6    12 c     N    
   7     3 a     A    
   8     3 b     Y    
   9     3 c     O    
  10     7 a     B    
  11     7 b     Z    
  12     7 c     O&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But recall that the desired output is of a wide form like the input,
so it looks like our tidy solution will require some indirection,
involving something like:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;input %&amp;gt;% 
  pivot_longer(-freq) %&amp;gt;% 
  ... %&amp;gt;% 
  pivot_wider(...)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or maybe you’d rather tackle this with some
&lt;code&gt;left_join()&lt;/code&gt;s, like:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;input %&amp;gt;% 
  left_join(summarize(input, freq_a = sum(freq), .by = a)) %&amp;gt;% 
  ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ll note that there’s actually also an idiomatic
&lt;code&gt;{dplyr}&lt;/code&gt;-solution to this using the lesser-known function
&lt;code&gt;add_count()&lt;/code&gt;, but you can’t avoid the repetitiveness problem
because it doesn’t vectorize over the first argument:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;input %&amp;gt;% 
  add_count(a, wt = freq, name = &amp;quot;freq_a&amp;quot;) %&amp;gt;% 
  add_count(b, wt = freq, name = &amp;quot;freq_b&amp;quot;) %&amp;gt;% 
  add_count(c, wt = freq, name = &amp;quot;freq_c&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    a b c freq freq_a freq_b freq_c
  1 A X M    5     20      5      5
  2 A Y N   12     20     15     12
  3 A Y O    3     20     15     10
  4 B Z O    7      7      7     10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could try to scale this &lt;code&gt;add_count()&lt;/code&gt; solution with
&lt;code&gt;reduce()&lt;/code&gt; (see my previous blog post on &lt;a
href="https://yjunechoe.github.io/posts/2020-12-13-collapse-repetitive-piping-with-reduce/"&gt;collapsing
repetitive piping&lt;/a&gt;), but now we’re straying very far from the “tidy”
territory:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;input %&amp;gt;% 
  purrr::reduce(
    c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;),
    ~ .x %&amp;gt;% 
      add_count(.data[[.y]], wt = freq, name = paste0(&amp;quot;freq_&amp;quot;, .y)),
    .init = .
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    a b c freq freq_a freq_b freq_c
  1 A X M    5     20      5      5
  2 A Y N   12     20     15     12
  3 A Y O    3     20     15     10
  4 B Z O    7      7      7     10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;IMO this problem is actually a really good thinking exercise for the
“average {dplyr} user”, so I encourage you to take a stab at this
yourself before proceeding if you’ve read this far!&lt;/p&gt;
&lt;h2 id="an-ave-dplyr-solution"&gt;An &lt;code&gt;ave()&lt;/code&gt; +
&lt;code&gt;{dplyr}&lt;/code&gt; solution&lt;/h2&gt;
&lt;p&gt;The crucial piece of the puzzle here is to think a little outside the
box, beyond “data(frame) wrangling”.&lt;/p&gt;
&lt;p&gt;It helps to simplify the problem once we think about the problem in
terms of “(column) vector wrangling” first, and that’s where
&lt;code&gt;ave()&lt;/code&gt; comes in!&lt;/p&gt;
&lt;p&gt;I’ll start with the cake first - this is the one-liner
&lt;code&gt;ave()&lt;/code&gt; solution I advocated for:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;input %&amp;gt;% 
  mutate(across(a:c, ~ ave(freq, .x, FUN = sum), .names = &amp;quot;freq_{.col}&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    a b c freq freq_a freq_b freq_c
  1 A X M    5     20      5      5
  2 A Y N   12     20     15     12
  3 A Y O    3     20     15     10
  4 B Z O    7      7      7     10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Taking column &lt;code&gt;freq_a&lt;/code&gt; as an example, the
&lt;code&gt;ave()&lt;/code&gt; part of the solution essential creates this vector of
summed-up &lt;code&gt;freq&lt;/code&gt; values by the categories of
&lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ave(input$freq, input$a, FUN = sum)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  [1] 20 20 20  7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there, &lt;code&gt;across()&lt;/code&gt; handles the iteration over columns
and, as an added bonus, the naming of the new columns in convenient
&lt;code&gt;{glue}&lt;/code&gt; syntax (&lt;code&gt;"freq_{.col}"&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It’s the perfect mashup of base R + tidyverse. Base R takes care of
the problem at the vector level with a split-apply-combine that’s
concisely expressed with &lt;code&gt;ave()&lt;/code&gt;, and tidyverse scales that
solution up to the dataframe level with &lt;code&gt;mutate()&lt;/code&gt; and
&lt;code&gt;across()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;tidyverse 🤝 base R&lt;/p&gt;
&lt;h2 id="sessioninfo"&gt;sessionInfo()&lt;/h2&gt;
&lt;pre class="r"&gt;&lt;code&gt;sessionInfo()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  R version 4.3.3 (2024-02-29 ucrt)
  Platform: x86_64-w64-mingw32/x64 (64-bit)
  Running under: Windows 11 x64 (build 22631)
  
  Matrix products: default
  
  
  locale:
  [1] LC_COLLATE=English_United States.utf8 
  [2] LC_CTYPE=English_United States.utf8   
  [3] LC_MONETARY=English_United States.utf8
  [4] LC_NUMERIC=C                          
  [5] LC_TIME=English_United States.utf8    
  
  time zone: Asia/Seoul
  tzcode source: internal
  
  attached base packages:
  [1] stats     graphics  grDevices utils     datasets  methods   base     
  
  other attached packages:
   [1] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    
   [5] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   
   [9] tidyverse_2.0.0 ggplot2_3.5.1  
  
  loaded via a namespace (and not attached):
   [1] sass_0.4.9        utf8_1.2.4        generics_0.1.3    xml2_1.3.6       
   [5] stringi_1.8.4     distill_1.6       hms_1.1.3         digest_0.6.35    
   [9] magrittr_2.0.3    evaluate_0.23     grid_4.3.3        timechange_0.2.0 
  [13] bookdown_0.38     fastmap_1.1.1     rprojroot_2.0.4   jsonlite_1.8.8   
  [17] fansi_1.0.6       scales_1.3.0      jquerylib_0.1.4   cli_3.6.2        
  [21] rlang_1.1.4       munsell_0.5.0     withr_3.0.0       cachem_1.0.8     
  [25] yaml_2.3.8        tools_4.3.3       tzdb_0.4.0        memoise_2.0.1    
  [29] colorspace_2.1-0  vctrs_0.6.5       R6_2.5.1          mime_0.12        
  [33] png_0.1-8         lifecycle_1.0.4   fontawesome_0.5.2 pkgconfig_2.0.3  
  [37] pillar_1.9.0      bslib_0.7.0       gtable_0.3.5      glue_1.7.0       
  [41] xfun_0.44         tidyselect_1.2.1  rstudioapi_0.16.0 knitr_1.47       
  [45] htmltools_0.5.8.1 rmarkdown_2.27    compiler_4.3.3    askpass_1.2.0    
  [49] downlit_0.4.3     openssl_2.1.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="footnotes footnotes-end-of-document"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;And check out the elusive &lt;code&gt;split&amp;lt;-&lt;/code&gt;
function!&lt;a href="#fnref1" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Who I can only assume was needing this for a fancy data
viz thing 😆&lt;a href="#fnref2" class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I mean that in the technical sense here. In this
problem, the unit of observation is the “cells” of the input columns
(the values “A”, “B”, “X”, “Y”, etc.).&lt;a href="#fnref3"
class="footnote-back"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
      <distill:md5>478d5b66974022ae5d6b9c8ba58783a7</distill:md5>
      <category>dplyr</category>
      <guid>https://yjunechoe.github.io/posts/2024-06-09-ave-for-the-average</guid>
      <pubDate>Sat, 08 Jun 2024 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2024-06-09-ave-for-the-average/preview.png" medium="image" type="image/png" width="926" height="328"/>
    </item>
    <item>
      <title>args(args(args)(args))</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2024-03-04-args-args-args-args</link>
      <description>The unexpected sequal to "R is a language optimized for meme-ing"</description>
      <category>args</category>
      <category>metaprogramming</category>
      <guid>https://yjunechoe.github.io/posts/2024-03-04-args-args-args-args</guid>
      <pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2024-03-04-args-args-args-args/preview.png" medium="image" type="image/png" width="419" height="300"/>
    </item>
    <item>
      <title>HelloWorld("print")</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2024-02-20-helloworld-print</link>
      <description>R is a language optimized for meme-ing</description>
      <category>metaprogramming</category>
      <guid>https://yjunechoe.github.io/posts/2024-02-20-helloworld-print</guid>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2024-02-20-helloworld-print/preview.png" medium="image" type="image/png" width="462" height="184"/>
    </item>
    <item>
      <title>2023 Year in Review</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2023-12-31-2023-year-in-review</link>
      <description>Reflections and updates on what I've been up to in 2023</description>
      <category>reflections</category>
      <guid>https://yjunechoe.github.io/posts/2023-12-31-2023-year-in-review</guid>
      <pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2023-12-31-2023-year-in-review/preview.png" medium="image" type="image/png" width="1512" height="1371"/>
    </item>
    <item>
      <title>The many ways to (un)tidy-select</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2023-12-03-untidy-select</link>
      <description>Deconstructing {tidyselect} and building it back up</description>
      <category>data wrangling</category>
      <category>dplyr</category>
      <category>tidyselect</category>
      <guid>https://yjunechoe.github.io/posts/2023-12-03-untidy-select</guid>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2023-12-03-untidy-select/preview.png" medium="image" type="image/png" width="957" height="664"/>
    </item>
    <item>
      <title>Fumbling my way through an XY problem</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2023-07-09-x-y-problem</link>
      <description>Some lessons learned from a (personal) case study</description>
      <category>reflections</category>
      <guid>https://yjunechoe.github.io/posts/2023-07-09-x-y-problem</guid>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2023-07-09-x-y-problem/preview.png" medium="image" type="image/png" width="238" height="205"/>
    </item>
    <item>
      <title>Row relational operations with slice()</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations</link>
      <description>A love letter to dplyr::slice() and a gallery of usecases</description>
      <category>data wrangling</category>
      <category>dplyr</category>
      <guid>https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations</guid>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2023-06-11-row-relational-operations/preview.png" medium="image" type="image/png" width="1800" height="1080"/>
    </item>
    <item>
      <title>First impressions of DataFrames.jl and accessories</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2022-11-13-dataframes-jl-and-accessories</link>
      <description>Perspectives from a {dplyr} and {data.table} useR</description>
      <category>julia</category>
      <category>data wrangling</category>
      <category>DataFrames.jl</category>
      <category>dplyr</category>
      <category>data.table</category>
      <guid>https://yjunechoe.github.io/posts/2022-11-13-dataframes-jl-and-accessories</guid>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2022-11-13-dataframes-jl-and-accessories/preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Reflections on useR! 2022</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2022-07-30-user2022</link>
      <description>Notes from attending and speaking at my first R conference</description>
      <category>conference</category>
      <category>ggtrace</category>
      <guid>https://yjunechoe.github.io/posts/2022-07-30-user2022</guid>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2022-07-30-user2022/preview.png" medium="image" type="image/png" width="520" height="260"/>
    </item>
    <item>
      <title>Demystifying delayed aesthetic evaluation: Part 2</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2022-07-06-ggplot2-delayed-aes-2</link>
      <description>Exposing the `Stat` ggproto in functional programming terms</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2022-07-06-ggplot2-delayed-aes-2</guid>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2022-07-06-ggplot2-delayed-aes-2/preview.png" medium="image" type="image/png" width="3469" height="2224"/>
    </item>
    <item>
      <title>Demystifying delayed aesthetic evaluation: Part 1</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2022-03-10-ggplot2-delayed-aes-1</link>
      <description>Exploring the logic of `after_stat()` to peek inside ggplot internals</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>ggplot internals</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2022-03-10-ggplot2-delayed-aes-1</guid>
      <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2022-03-10-ggplot2-delayed-aes-1/preview.png" medium="image" type="image/png" width="1457" height="872"/>
    </item>
    <item>
      <title>Setting up and debugging custom fonts</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts</link>
      <description>A practical introduction to all (new) things font in R</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>typography</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts</guid>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts/preview.png" medium="image" type="image/png" width="709" height="612"/>
    </item>
    <item>
      <title>Random Sampling: A table animation</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2021-01-17-random-sampling-a-table-animation</link>
      <description>Plus a convenient way of rendering LaTeX expressions as images</description>
      <category>data visualization</category>
      <category>data wrangling</category>
      <guid>https://yjunechoe.github.io/posts/2021-01-17-random-sampling-a-table-animation</guid>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2021-01-17-random-sampling-a-table-animation/table_preview.png" medium="image" type="image/png" width="1185" height="1180"/>
    </item>
    <item>
      <title>Collapse repetitive piping with reduce()</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-12-13-collapse-repetitive-piping-with-reduce</link>
      <description>Featuring accumulate()</description>
      <category>data wrangling</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-12-13-collapse-repetitive-piping-with-reduce</guid>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-12-13-collapse-repetitive-piping-with-reduce/reduce_ggplot.png" medium="image" type="image/png" width="1233" height="775"/>
    </item>
    <item>
      <title>Plot Makeover #2</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-11-08-plot-makeover-2</link>
      <description>Making a dodged-stacked hybrid bar plot in {ggplot2}</description>
      <category>plot makeover</category>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-11-08-plot-makeover-2</guid>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-11-08-plot-makeover-2/plot-makeover-2_files/figure-html5/final-1.png" medium="image" type="image/png" width="1344" height="1152"/>
    </item>
    <item>
      <title>TidyTuesday 2020 week 45</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-11-03-tidytuesday-2020-week-45</link>
      <description>Waffle chart of IKEA furnitures in stock</description>
      <category>ggplot2</category>
      <category>data visualization</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-11-03-tidytuesday-2020-week-45</guid>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-11-03-tidytuesday-2020-week-45/preview.png" medium="image" type="image/png" width="4443" height="2950"/>
    </item>
    <item>
      <title>TidyTuesday 2020 week 44</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-10-28-tidytuesday-2020-week-44</link>
      <description>Patched animation of the location and cumulative capacity of wind turbines in Canada</description>
      <category>ggplot2</category>
      <category>gganimate</category>
      <category>spatial</category>
      <category>data visualization</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-10-28-tidytuesday-2020-week-44</guid>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-10-28-tidytuesday-2020-week-44/preview.png" medium="image" type="image/png" width="735" height="541"/>
    </item>
    <item>
      <title>Analysis of @everycolorbot's tweets</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-10-22-analysis-of-everycolorbots-tweets</link>
      <description>And why you should avoid neon colors</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>rtweet</category>
      <category>colors</category>
      <guid>https://yjunechoe.github.io/posts/2020-10-22-analysis-of-everycolorbots-tweets</guid>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-10-22-analysis-of-everycolorbots-tweets/preview.png" medium="image" type="image/png" width="2433" height="2259"/>
    </item>
    <item>
      <title>Designing guiding aesthetics</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-10-13-designing-guiding-aesthetics</link>
      <description>The fine line between creativity and noise</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-10-13-designing-guiding-aesthetics</guid>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-10-13-designing-guiding-aesthetics/preview.png" medium="image" type="image/png" width="8503" height="6377"/>
    </item>
    <item>
      <title>Demystifying stat_ layers in {ggplot2}</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-26-demystifying-stat-layers-ggplot2</link>
      <description>The motivation behind stat, the distinction between stat and geom, and a case study of stat_summary()</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-26-demystifying-stat-layers-ggplot2</guid>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-26-demystifying-stat-layers-ggplot2/preview.png" medium="image" type="image/png" width="240" height="278"/>
    </item>
    <item>
      <title>TidyTuesday 2020 week 39</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-23-tidytuesday-2020-week-39</link>
      <description>Stacked area plot of the heights of Himalayan peaks attempted over the last century</description>
      <category>ggplot2</category>
      <category>data visualization</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-23-tidytuesday-2020-week-39</guid>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-23-tidytuesday-2020-week-39/preview.png" medium="image" type="image/png" width="7086" height="4251"/>
    </item>
    <item>
      <title>Plot Makeover #1</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-20-plot-makeover-1</link>
      <description>Flattening a faceted grid for strictly horizontal comparisons</description>
      <category>plot makeover</category>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-20-plot-makeover-1</guid>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-20-plot-makeover-1/plot-makeover-1_files/figure-html5/after_bar_plot-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>TidyTuesday 2020 week 38</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-14-tidytuesday-2020-week-38</link>
      <description>Visualizing two decades of primary and secondary education spending with {gt}</description>
      <category>tables</category>
      <category>data visualization</category>
      <category>tidytuesday</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-14-tidytuesday-2020-week-38</guid>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-14-tidytuesday-2020-week-38/preview.png" medium="image" type="image/png" width="1703" height="2203"/>
    </item>
    <item>
      <title>Embedding videos in {reactable} tables</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-12-videos-in-reactable</link>
      <description>Pushing the limits of expandable row details</description>
      <category>tables</category>
      <category>data visualization</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-12-videos-in-reactable</guid>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-12-videos-in-reactable/preview.png" medium="image" type="image/png" width="808" height="617"/>
    </item>
    <item>
      <title>Fonts for graphs</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-09-06-fonts-for-graphs</link>
      <description>A small collection of my favorite fonts for data visualization</description>
      <category>data visualization</category>
      <category>typography</category>
      <guid>https://yjunechoe.github.io/posts/2020-09-06-fonts-for-graphs</guid>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-09-06-fonts-for-graphs/preview.png" medium="image" type="image/png" width="1144" height="675"/>
    </item>
    <item>
      <title>TidyTuesday 2020 Week 33</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-08-17-tidytuesday-2020-week-33</link>
      <description>An animation of the main characters in Avatar</description>
      <category>tidytuesday</category>
      <category>gganimate</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-08-17-tidytuesday-2020-week-33</guid>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-08-17-tidytuesday-2020-week-33/preview.png" medium="image" type="image/png" width="1289" height="964"/>
    </item>
    <item>
      <title>Saving a line of piping</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-08-07-saving-a-line-of-piping</link>
      <description>Some notes on lesser known functions/functionalities that combine common chain of {dplyr} verbs.</description>
      <category>data wrangling</category>
      <category>dplyr</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-08-07-saving-a-line-of-piping</guid>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-08-07-saving-a-line-of-piping/preview.png" medium="image" type="image/png" width="877" height="372"/>
    </item>
    <item>
      <title>TidyTuesday 2020 Week 32</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-08-04-tidytuesday-2020-week-32</link>
      <description>A dumbbell chart visualization of energy production trends among European countries</description>
      <category>tidytuesday</category>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-08-04-tidytuesday-2020-week-32</guid>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-08-04-tidytuesday-2020-week-32/preview.png" medium="image" type="image/png" width="1444" height="805"/>
    </item>
    <item>
      <title>Six years of my Spotify playlists</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-07-29-six-years-of-my-spotify-playlists</link>
      <description>An analysis of acoustic features with {spotifyr}</description>
      <category>ggplot2</category>
      <category>gganimate</category>
      <category>spotifyr</category>
      <category>data wrangling</category>
      <category>data visualization</category>
      <guid>https://yjunechoe.github.io/posts/2020-07-29-six-years-of-my-spotify-playlists</guid>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-07-29-six-years-of-my-spotify-playlists/preview.png" medium="image" type="image/png" width="3593" height="2459"/>
    </item>
    <item>
      <title>Shiny tips - the first set</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-07-20-shiny-tips-1</link>
      <description>%||%, imap() + {shinybusy}, and user inputs in modalDialog()</description>
      <category>shiny</category>
      <guid>https://yjunechoe.github.io/posts/2020-07-20-shiny-tips-1</guid>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-07-20-shiny-tips-1/preview.png" medium="image" type="image/png" width="746" height="133"/>
    </item>
    <item>
      <title>geom_paired_raincloud()</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-07-13-geom-paired-raincloud</link>
      <description>A {ggplot2} geom for visualizing change in distribution between two conditions.</description>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://yjunechoe.github.io/posts/2020-07-13-geom-paired-raincloud</guid>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-07-13-geom-paired-raincloud/preview.png" medium="image" type="image/png" width="7086" height="4251"/>
    </item>
    <item>
      <title>Plotting treemaps with {treemap} and {ggplot2}</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-06-30-treemap-with-ggplot</link>
      <description>Using underlying plot data for maximum customization</description>
      <category>data visualization</category>
      <category>treemap</category>
      <category>ggplot2</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-06-30-treemap-with-ggplot</guid>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-06-30-treemap-with-ggplot/2020-06-30-treemap-with-ggplot_files/figure-html5/unnamed-chunk-12-1.png" medium="image" type="image/png" width="1920" height="768"/>
    </item>
    <item>
      <title>Indexing tip for {spacyr}</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-06-25-indexing-tip-for-spacyr</link>
      <description>Speeding up the analysis of dependency relations.</description>
      <category>data wrangling</category>
      <category>NLP</category>
      <category>spacyr</category>
      <guid>https://yjunechoe.github.io/posts/2020-06-25-indexing-tip-for-spacyr</guid>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-06-25-indexing-tip-for-spacyr/preview.png" medium="image" type="image/png" width="1920" height="686"/>
    </item>
    <item>
      <title>The Correlation Parameter in Mixed Effects Models</title>
      <dc:creator>June Choe</dc:creator>
      <link>https://yjunechoe.github.io/posts/2020-06-07-correlation-parameter-mem</link>
      <description>Notes on the Corr term in {lme4} output</description>
      <category>statistics</category>
      <category>mixed-effects models</category>
      <category>tutorial</category>
      <guid>https://yjunechoe.github.io/posts/2020-06-07-correlation-parameter-mem</guid>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      <media:content url="https://yjunechoe.github.io/posts/2020-06-07-correlation-parameter-mem/preview.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
  </channel>
</rss>
